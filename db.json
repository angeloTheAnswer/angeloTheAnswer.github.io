{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","path":"medias/avatars/ajin.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","path":"medias/avatars/masterx.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","path":"medias/avatars/taotao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","path":"medias/avatars/tawn.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/yezijie.png","path":"medias/avatars/yezijie.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","path":"medias/avatars/feibar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","path":"medias/avatars/jiejie.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","path":"medias/avatars/xiejiadong.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/8.jpg","path":"medias/banner/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/contact.jpg","path":"medias/contact.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.png","path":"medias/avatars/feibar.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1658467616554},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1658467616599},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1658467616601},{"_id":"source/_data/friends.json","hash":"d1c8b53c81c960ce5e01fc57ee5e27cae1e20ab6","modified":1658467616556},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1658467616558},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1658467616603},{"_id":"source/_posts/pytest.md","hash":"0cfce722d431be651afb16125eeaf6cf34761bfe","modified":1658468943232},{"_id":"source/_posts/removeDuplicates.md","hash":"748ada84ea1ed4324cd3c5fc3a35b0fef49a1824","modified":1661155652588},{"_id":"source/_posts/work.md","hash":"c4832a953a2b1a9fc8b8276eeb712265f4f8c2e0","modified":1660018806124},{"_id":"source/_posts/Mysql.md","hash":"654f3ce4ffd1e9422a17aefa430c62e19730042e","modified":1658467616561},{"_id":"source/about/index.md","hash":"62dcdb0e673fea1c87b639c085c7c884d8acc869","modified":1658467616582},{"_id":"source/archives/index.md","hash":"7cb9612fde319a2c20dd509611fdde6f6ddc293d","modified":1658467616585},{"_id":"source/_posts/article-Linux.md","hash":"b726fef9d3dbce8bed67496dcd99de321969ca2b","modified":1658467616563},{"_id":"source/friends/index.md","hash":"581350267f17d0ede919886420565526add7f3a2","modified":1658467616593},{"_id":"source/_posts/article-title.md","hash":"2b72ea541f8eedf9788f2f60f85d199bd5b1b57d","modified":1658467616571},{"_id":"source/categories/index.md","hash":"afc0263125854633058620a0f1ae47962a723ba6","modified":1658467616587},{"_id":"source/contact/index.md","hash":"93aa3375dba303caf65b1f4c0c407acb8877e63c","modified":1658467616591},{"_id":"source/_posts/wenzhangmoban.md","hash":"f2e3091f3867964e9fc8b1ab83461f7c2b5f17c5","modified":1658467616578},{"_id":"source/tags/index.md","hash":"2131d93a342fb04a0aa74a61d57c6b7cfcebb29d","modified":1658467616596},{"_id":"themes/matery/_config.yml","hash":"45f590f0280baa57d18aac0ebe7cf5ee9a0433a8","modified":1658467616606},{"_id":"source/_posts/配置多个git.md","hash":"13a12940265d7086247bcf24e669eb5e3566259e","modified":1660274041576},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1658467616604},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1658467616609},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1658467616610},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1658467616688},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1658467616685},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1658467616689},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1658467616683},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1658467616692},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1658467616682},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1658467616694},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1658467616696},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1658467616697},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1658467616699},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1658467616691},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1658467616614},{"_id":"source/_posts/article-Linux/Linux.png","hash":"36237c87875931243f516efe0781f183edacecc8","modified":1658467616566},{"_id":"source/_posts/article-Linux/lsjieshitu.png","hash":"978d6d46d65618c9540639145bce40e8112ac1f6","modified":1658467616567},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1658467616616},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1658467616619},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"914bfc433fd4fa1c3a8b4696115cec7fe9db14d0","modified":1658467616618},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1658467616621},{"_id":"source/_posts/article-Linux/shuoming.jpeg","hash":"b5e41d694685d5c99ac627d8116227d96a725180","modified":1658467616569},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1658467616628},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1658467616630},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1658467616624},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"0208c72410620be3ab619d8b997bd5de1af71996","modified":1658467616631},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1658467616627},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1658467616633},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1658467616636},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1658467616638},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1658467616640},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1658467616635},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"8375c6bc89b93ca49dc7e0c7d584b287d3a45218","modified":1658467616623},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1658467616646},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1658467616641},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1658467616643},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1658467616644},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1658467616651},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1658467616654},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1658467616655},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1658467616657},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1658467616647},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1658467616652},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1658467616663},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1658467616664},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1658467616661},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1658467616666},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1658467616667},{"_id":"themes/matery/source/favicon.png","hash":"59e69342d33bee4a6a335e91b0e4bcdbcddf4ce7","modified":1658467616709},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1658467616671},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1658467616669},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1658467616675},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1658467616677},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1658467616678},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1658467616679},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1658467616649},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1658467616680},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1658467616703},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1658467616707},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1658467616659},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1658467616706},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1658467616712},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1658467616713},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1658467616704},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1658467616673},{"_id":"source/_posts/pytest/jiagoutu.png","hash":"0bdfbc80c61d4347f33216ac7b180c3e4954734f","modified":1658467616576},{"_id":"themes/matery/source/medias/logo.png","hash":"59e69342d33bee4a6a335e91b0e4bcdbcddf4ce7","modified":1658467617078},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1658467616717},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1658467616720},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"98f626d784a94ebe653b13f3a4c79e483264cae7","modified":1658467616750},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1658467616751},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6ad8984746f0ff4e2fc81f0c04f12874fa752683","modified":1658467616754},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"d54f6205b35dceba1d66da761c00ff9fad9cf857","modified":1658467616753},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"743114dcd6f3addc973778b1b248f88d42b05278","modified":1658467616756},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1658467616724},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1658467616721},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1658467616758},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1658467616770},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1658467616761},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1658467616775},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1658467616779},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1658467616809},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1658467616780},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1658467616817},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1658467616819},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1658467616825},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1658467616820},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1658467616828},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1658467616822},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1658467616846},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1658467616847},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1658467616823},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1658467616866},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1658467616858},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1658467616875},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1658467616881},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1658467616864},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1658467616884},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1658467616892},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1658467616894},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1658467616896},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1658467616900},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1658467616879},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1658467616909},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1658467616898},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1658467616918},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1658467616917},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1658467616910},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1658467616928},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1658467616933},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1658467616935},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1658467616936},{"_id":"themes/matery/source/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1658467616943},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1658467616949},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1658467616930},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1658467616979},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1658467616926},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1658467617058},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"e0651192eb37af2a0b46682bf3096c0edb963c75","modified":1658467617092},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"f3a5f02687b3365141a82bde6f033dd9d49dda97","modified":1658467617094},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1658467616726},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1658467616763},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1658467616776},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1658467616783},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1658467616861},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"08368a1b3e0949cf4b31e4f458a6539aa91fcebd","modified":1658467616863},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1658467616850},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1658467616869},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1658467616871},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1658467616886},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1658467616877},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1658467616915},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1658467616913},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1658467616920},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1658467616882},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1658467616922},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1658467616939},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1658467616941},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1658467616945},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1658467616951},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1658467616956},{"_id":"themes/matery/source/medias/banner/8.jpg","hash":"a8af2dd3a1879546157079cd382c3d95998d90f6","modified":1658467616974},{"_id":"themes/matery/source/medias/banner/7.jpg","hash":"b5e41d694685d5c99ac627d8116227d96a725180","modified":1658467616972},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1658467616729},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1658467616791},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1658467616795},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1658467616799},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1658467616793},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1658467616790},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1658467616804},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1658467616812},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1658467616814},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1658467616772},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1658467616834},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1658467616837},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1658467616836},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1658467616839},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1658467616852},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1658467616856},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1658467616831},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1658467616902},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1658467616904},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1658467616801},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1658467616925},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1658467616994},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1658467616998},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1658467616954},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1658467616959},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1658467616970},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1658467617084},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1658467617086},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1658467617088},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1658467616802},{"_id":"themes/matery/source/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1658467616976},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1658467616747},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1658467616787},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1658467616807},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1658467616843},{"_id":"themes/matery/source/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1658467616873},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1658467616891},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1658467616907},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1658467616841},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1658467617029},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1658467616733},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1658467616744},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1658467617039},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1658467617048},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1658467617051},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1658467616947},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1658467616992},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1658467617018},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1658467617032},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1658467617062},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1658467617065},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1658467616736},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1658467616967},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1658467616742},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1658467617007},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1658467617045},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1658467616888},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1658467617083},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1658467616965},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1658467617006},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1658467617010},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1658467617022},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1658467617026},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1658467617036},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1658467617042},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1658467616990},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1658467616982},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1658467617015},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1658467617070},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1658467616739},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1658467617076},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1658467617003},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1658467617056},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1658467616985},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1658467616961},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1658467616768},{"_id":"public/atom.xml","hash":"48ab04aec2ddb7d7aa96de93f293211fbf7ecd60","modified":1661155671881},{"_id":"public/baidusitemap.xml","hash":"62088b2600a6b05591fa549176ecf3f04bc52900","modified":1661150457241},{"_id":"public/sitemap.xml","hash":"9c0f4f319fe153e1f2cbb1c82159ffa9d269b1df","modified":1661155671658},{"_id":"public/search.xml","hash":"57d1a089db307acc386272711cbd8f7c461f5b10","modified":1661155671657},{"_id":"public/404.html","hash":"5b7ad4dde33428f2349a654a68c15a3f10b353ae","modified":1661155563195},{"_id":"public/about/index.html","hash":"9dd1478d5b418f3105579a9c6f2a6e5aefc493ae","modified":1661155563195},{"_id":"public/archives/index.html","hash":"69fec548ead6ff89b261526ab71ac4b390561ee0","modified":1661155563195},{"_id":"public/friends/index.html","hash":"99f49d98d5e1ae3b5c6383bf0ff57b9c1babc1a0","modified":1661155563195},{"_id":"public/contact/index.html","hash":"01810232f8424b8b6d080888646124658e8db9e4","modified":1661155563195},{"_id":"public/categories/index.html","hash":"a83ecfc22e8a488f345eb85a67afe59eb8a2791b","modified":1661155563195},{"_id":"public/tags/index.html","hash":"1d607ebc1c05c0187d75aee49b4958fab5c02bb7","modified":1661155563195},{"_id":"public/2021/08/11/pei-zhi-duo-ge-git/index.html","hash":"5e5381df3b66b837b2ec7f64e79ece0cfbe23cff","modified":1661155563195},{"_id":"public/2021/06/13/pytest/index.html","hash":"17ad38066fcc9ad11fa6b1ba3fadc198db960f1c","modified":1661155563195},{"_id":"public/2020/12/02/work/index.html","hash":"1c6ad67cc510c749fdcd9c94a40a2d37b55264f0","modified":1661155563195},{"_id":"public/2020/02/20/mysql/index.html","hash":"4d2cf086a36c88798b4bcd824e6bd66e50541ac6","modified":1661155563195},{"_id":"public/2020/02/18/article-title/index.html","hash":"95c213cbca31405a74a1ec42a51d3d89a7d70d9a","modified":1661155563196},{"_id":"public/2020/02/18/article-linux/index.html","hash":"67b3c225a2f91daf66e5f3436c3915b4dcd2d69c","modified":1661155563196},{"_id":"public/2020/02/16/wenzhangmoban/index.html","hash":"fce680f5b75e45e8ffb574a2b68f89f7687027aa","modified":1661155563196},{"_id":"public/categories/SQL/index.html","hash":"f8401c4b62c5d910ba5a41a4136360e4e84f19f8","modified":1661155563196},{"_id":"public/categories/Linux/index.html","hash":"732b87af7107d80271cc908ecf68edb63ebb0fdd","modified":1661155563196},{"_id":"public/categories/网络安全/index.html","hash":"4bf0dc5b68c7d5522bb6f400b9ad73c8d930fd6d","modified":1661155563196},{"_id":"public/categories/git/index.html","hash":"962fb15d002cddc9d1cc6b8b375a67b4e6a4a8d5","modified":1661155563196},{"_id":"public/categories/pytest/index.html","hash":"ac9683b87a31a34a5a5d3c3e07d39a65f5754945","modified":1661155563196},{"_id":"public/archives/2020/index.html","hash":"9801fa793975e352bc5c22e91f1195d8231fcda8","modified":1661155563196},{"_id":"public/archives/2020/02/index.html","hash":"a4399b141396718afbf56d1101b7e635b9cc6239","modified":1661155563196},{"_id":"public/archives/2020/12/index.html","hash":"700bfcb62cdcdc9741e001bef859233d4956aef8","modified":1661155563196},{"_id":"public/archives/2021/index.html","hash":"2817cc79a5a653bee4890958ea38b004acba8c29","modified":1661155563196},{"_id":"public/archives/2021/06/index.html","hash":"6cf0dd910e60b4f8e4ec509e9a83d2f0ba9cfcbf","modified":1661155563196},{"_id":"public/archives/2021/08/index.html","hash":"f83ad2cb06bbddf0cec9f805dda6983964be75ac","modified":1661155563196},{"_id":"public/index.html","hash":"fefab4e0c03676f6612da9c7dab71a628ae32700","modified":1661155563196},{"_id":"public/tags/python/index.html","hash":"12bd005710a2cf88dc55298a17c7edb2f099477a","modified":1661155563196},{"_id":"public/tags/problem/index.html","hash":"1d8d2f0462e72baaafd0139a645d26dcdc8cb913","modified":1661155563196},{"_id":"public/tags/SQL/index.html","hash":"3d828b93ed64c4e44456143b672b52f22e4675dd","modified":1661155563196},{"_id":"public/tags/Linux/index.html","hash":"545422bff552c7b033bd860fbbd14c9ea47c9550","modified":1661155563197},{"_id":"public/tags/网络安全/index.html","hash":"93c059d1aae7a6f9d0c859e51270c4a02f11b843","modified":1661155563197},{"_id":"public/tags/git/index.html","hash":"782011bf00abb9626f31ca0f395aa0a8406bad67","modified":1661155563197},{"_id":"public/tags/自动化/index.html","hash":"4b67b1dd6eeb368650d6ef126f939fb8b974bab4","modified":1661155563197},{"_id":"public/tags/pytest/index.html","hash":"a5405b4f2c04054adfcd429bd8de18ca69244af0","modified":1661155563197},{"_id":"public/2020/12/01/removeduplicates/index.html","hash":"54a6e29c39ad16e85faf39f513e548df100daf99","modified":1661155671957},{"_id":"public/categories/Solution/index.html","hash":"8ba5d1e50301939a01a4dc8a721b3827baa327da","modified":1661155563196},{"_id":"public/tags/Solution/index.html","hash":"fc413f8952084830aeee5b9fd0ee0323fd0b8ee8","modified":1661155563196},{"_id":"public/tags/Array/index.html","hash":"3784bc7b60182c027ee3ba8af7236cc5203c7d47","modified":1661155563196},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1661150457613},{"_id":"public/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1661150457614},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1661150457614},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1661150457614},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1661150457614},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1661150457614},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1661150457614},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1661150457614},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1661150457614},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1661150457614},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1661150457614},{"_id":"public/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1661150457614},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1661150457614},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1661150457614},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1661150457614},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1661150457614},{"_id":"public/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1661150457614},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1661150457614},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1661150457614},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1661150457614},{"_id":"public/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1661150457614},{"_id":"public/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1661150457614},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1661150457614},{"_id":"public/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1661150457614},{"_id":"public/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1661150457614},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1661150457614},{"_id":"public/medias/reward/alipay.jpg","hash":"e0651192eb37af2a0b46682bf3096c0edb963c75","modified":1661150457614},{"_id":"public/medias/reward/wechat.png","hash":"f3a5f02687b3365141a82bde6f033dd9d49dda97","modified":1661150457614},{"_id":"public/medias/avatars/avatar.jpg","hash":"08368a1b3e0949cf4b31e4f458a6539aa91fcebd","modified":1661150457614},{"_id":"public/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1661150457614},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1661150457614},{"_id":"public/medias/banner/7.jpg","hash":"b5e41d694685d5c99ac627d8116227d96a725180","modified":1661150457615},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1661150457615},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1661150457615},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1661150457615},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1661150457615},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1661150457615},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1661150457615},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1661150457615},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1661150457615},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1661150457615},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1661150457615},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1661150457615},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1661150457615},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1661150457615},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1661150457615},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1661150457615},{"_id":"public/2020/02/18/article-linux/Linux.png","hash":"36237c87875931243f516efe0781f183edacecc8","modified":1661150457615},{"_id":"public/2020/02/18/article-linux/lsjieshitu.png","hash":"978d6d46d65618c9540639145bce40e8112ac1f6","modified":1661150457615},{"_id":"public/2020/02/18/article-linux/shuoming.jpeg","hash":"b5e41d694685d5c99ac627d8116227d96a725180","modified":1661150457615},{"_id":"public/css/prism-tomorrow.css","hash":"1d7783d5bc6360e088d553fa1384a6cf5faa007f","modified":1661150457615},{"_id":"public/css/prism-line-numbers.css","hash":"cdad9f52f4368d5912ab7faf6348a2c360e19208","modified":1661150457615},{"_id":"public/favicon.png","hash":"59e69342d33bee4a6a335e91b0e4bcdbcddf4ce7","modified":1661150457617},{"_id":"public/medias/logo.png","hash":"59e69342d33bee4a6a335e91b0e4bcdbcddf4ce7","modified":1661150457618},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1661150457619},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1661150457619},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1661150457619},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1661150457619},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1661150457619},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1661150457619},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1661150457619},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1661150457619},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1661150457619},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1661150457619},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1661150457619},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1661150457619},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1661150457619},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1661150457619},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1661150457619},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1661150457619},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1661150457619},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1661150457619},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1661150457619},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1661150457620},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1661150457620},{"_id":"public/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1661150457621},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1661150457621},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1661150457621},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1661150457621},{"_id":"public/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1661150457621},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1661150457621},{"_id":"public/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1661150457621},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1661150457621},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1661150457621},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1661150457621},{"_id":"public/medias/banner/8.jpg","hash":"a8af2dd3a1879546157079cd382c3d95998d90f6","modified":1661150457622},{"_id":"public/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1661150457622},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1661150457624},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1661150457625},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1661150457625},{"_id":"public/2021/06/13/pytest/jiagoutu.png","hash":"0bdfbc80c61d4347f33216ac7b180c3e4954734f","modified":1661150457628},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1661150457634},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1661150457634},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1661150457634},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1661150457634},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1661150457634},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1661150457634},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1661150457634},{"_id":"public/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1661150457634},{"_id":"public/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1661150457634},{"_id":"public/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1661150457634},{"_id":"public/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1661150457634},{"_id":"public/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1661150457634},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1661150457634},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1661150457635},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1661150457635},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1661150457649},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1661150457649},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1661150457649},{"_id":"public/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1661150457661},{"_id":"public/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1661150457661},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1661150457662},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1661150457665},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1661150457665},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1661150457671},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1661150457671},{"_id":"public/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1661150457671},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1661150457671},{"_id":"public/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1661150457671},{"_id":"public/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1661150457672},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1661150457672},{"_id":"public/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1661150457672},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1661150457675},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1661150457675},{"_id":"public/css/matery.css","hash":"caa63c2c7908e45ebbbea0fbdc72d09b7b6d5b76","modified":1661150457681},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1661150457689},{"_id":"public/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1661150457689},{"_id":"public/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1661150457689},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1661150457689},{"_id":"public/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1661150457691},{"_id":"public/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1661150457691},{"_id":"public/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1661150457692},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1661150457694},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1661150457694},{"_id":"public/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1661150457694},{"_id":"public/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1661150457694},{"_id":"public/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1661150457694},{"_id":"public/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1661150457694},{"_id":"public/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1661150457695},{"_id":"public/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1661150457695},{"_id":"public/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1661150457698},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1661150457700},{"_id":"public/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1661150457701},{"_id":"public/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1661150457701},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1661150457701},{"_id":"public/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1661150457703},{"_id":"public/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1661150457704},{"_id":"public/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1661150457704},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1661150457704},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1661150457706},{"_id":"public/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1661150457706},{"_id":"public/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1661150457710},{"_id":"public/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1661150457711},{"_id":"public/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1661150457712},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1661150457716},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1661150457716},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1661150457719},{"_id":"public/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1661150457722},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1661150457726},{"_id":"public/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1661150457726},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1661150457729},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1661150457729},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1661150457731},{"_id":"public/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1661150457735},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1661150457737},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1661150457759}],"Category":[{"name":"Solution","_id":"cl74e3am80002rcpg1v6ttcq1"},{"name":"SQL","_id":"cl74e3amt000hrcpgnybuwoal"},{"name":"Linux","_id":"cl74e3amy000orcpgehg2rizh"},{"name":"网络安全","_id":"cl74e3an0000trcpgg2edrwun"},{"name":"git","_id":"cl74e3an0000xrcpgwj5jem9y"},{"name":"pytest","_id":"cl74e3apo0017rcpgyabol8l1"}],"Data":[{"_id":"friends","data":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2022-07-22T05:26:56.554Z","path":"404.html","comments":1,"_id":"cl74e3a8f0000rcpg6ki6foy8","content":"","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-05-31T16:00:00.000Z","type":"about","layout":"about","_content":"\n\n## 教育经历\n* <b>本科 计算机科学与技术</b>\n长春理工大学\n2014/09 - 2018/06\n\n## 联系方式\n* <b>电子邮箱</b>\n260312343@qq.com\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-06-01 00:00:00\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n## 教育经历\n* <b>本科 计算机科学与技术</b>\n长春理工大学\n2014/09 - 2018/06\n\n## 联系方式\n* <b>电子邮箱</b>\n260312343@qq.com\n\n\n","updated":"2022-07-22T05:26:56.582Z","path":"about/index.html","comments":1,"_id":"cl74e3amo000brcpgic1gw016","content":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>本科 计算机科学与技术</b><br>长春理工大学<br>2014/09 - 2018/06</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:260312343@qq.com\" target=\"_blank\" rel=\"noopener\">260312343@qq.com</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>本科 计算机科学与技术</b><br>长春理工大学<br>2014/09 - 2018/06</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:260312343@qq.com\" target=\"_blank\" rel=\"noopener\">260312343@qq.com</a></li>\n</ul>\n"},{"title":"archives","date":"2020-05-31T16:00:00.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2020-06-01 00:00:00\ntype: \"archives\"\nlayout: \"archives\"\n---\n","updated":"2022-07-22T05:26:56.585Z","path":"archives/index.html","comments":1,"_id":"cl74e3amq000drcpgtooxynqk","content":"","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-05-31T16:00:00.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**TheAnswer\n* **地址：**https://angelotheanswer.github.io\n* **简介：**网络安全，伴你同行！\n* **头像：**https://angelotheanswer.github.io/medias/avatars/avatar.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-06-01 00:00:00\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**TheAnswer\n* **地址：**https://angelotheanswer.github.io\n* **简介：**网络安全，伴你同行！\n* **头像：**https://angelotheanswer.github.io/medias/avatars/avatar.jpg\n","updated":"2022-07-22T05:26:56.593Z","path":"friends/index.html","comments":1,"_id":"cl74e3ams000grcpgbxcmjxvd","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>TheAnswer</li>\n<li><strong>地址：</strong><a href=\"https://angelotheanswer.github.io\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io</a></li>\n<li><strong>简介：</strong>网络安全，伴你同行！</li>\n<li><strong>头像：</strong><a href=\"https://angelotheanswer.github.io/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>TheAnswer</li>\n<li><strong>地址：</strong><a href=\"https://angelotheanswer.github.io\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io</a></li>\n<li><strong>简介：</strong>网络安全，伴你同行！</li>\n<li><strong>头像：</strong><a href=\"https://angelotheanswer.github.io/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"contact","date":"2020-05-31T16:00:00.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**TheAnswer\n* **地址：**https://angelotheanswer.github.io\n* **简介：**网络安全，伴你同行！\n* **头像：**https://angelotheanswer.github.io/medias/avatars/avatar.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-06-01 00:00:00\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**TheAnswer\n* **地址：**https://angelotheanswer.github.io\n* **简介：**网络安全，伴你同行！\n* **头像：**https://angelotheanswer.github.io/medias/avatars/avatar.jpg\n","updated":"2022-07-22T05:26:56.591Z","path":"contact/index.html","comments":1,"_id":"cl74e3amu000jrcpgzt2zzbzr","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>TheAnswer</li>\n<li><strong>地址：</strong><a href=\"https://angelotheanswer.github.io\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io</a></li>\n<li><strong>简介：</strong>网络安全，伴你同行！</li>\n<li><strong>头像：</strong><a href=\"https://angelotheanswer.github.io/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>TheAnswer</li>\n<li><strong>地址：</strong><a href=\"https://angelotheanswer.github.io\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io</a></li>\n<li><strong>简介：</strong>网络安全，伴你同行！</li>\n<li><strong>头像：</strong><a href=\"https://angelotheanswer.github.io/medias/avatars/avatar.jpg\" target=\"_blank\" rel=\"noopener\">https://angelotheanswer.github.io/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"categories","date":"2020-05-31T16:00:00.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-06-01 00:00:00\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-07-22T05:26:56.587Z","path":"categories/index.html","comments":1,"_id":"cl74e3amx000mrcpgpnne6gnp","content":"","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-05-31T16:00:00.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-06-01 00:00:00\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-07-22T05:26:56.596Z","path":"tags/index.html","comments":1,"_id":"cl74e3amz000prcpgwsxtwc96","content":"","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"removeDuplicates","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-01T04:19:02.000Z","password":null,"summary":"删除排序数组中的重复项","_content":"**题目:**\n**给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。**\n**由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。**\n**将最终结果插入 nums 的前 k 个位置后返回 k 。**\n**不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 <code>O\\(1\\)</code> 额外空间的条件下完成。**\n\n```sh\nclass Solution(object):\n    def removeDuplicates(self,nums: List[int]) -> int:\n        for i in range(len(nums),0,-1):\n            if nums[i] == nums[i-1]:\n                del(nums[i])\n        return len(nums)        \n```\n\n函数中参数后面的冒号是参数的类型建议符\n函数后面的箭头是函数返回值的类型建议符\n\npython中的<code>range\\(\\)</code>函数\n\nrange()函数用于生成一个整数序列\n\n第一种只有一个参数<code>range\\(stop\\)</code>\n```sh\n#range(10)指的是默认从0开始，步长为1，不包括10\nprint('示例结果：',list(range(10)))\n```\n\n```sh\n示例结果： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n第二种有两个参数<code>range\\(start,stop\\)</code>\n```sh\n#range(1,10)指的是1开始，步长为1，不包括10\nprint('示例结果：',list(range(1,10)))\n```\n\n```sh\n示例结果： [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n第三种有三个参数<code>range\\(start,stop,step\\)</code>\n```sh\n#range(1,10,2)指的是1开始，步长为2，不包括10\nprint('示例结果：',list(range(1,10,2)))\n```\n\n```sh\n示例结果： [1, 3, 5, 7, 9]\n```\n\n```sh\n#range(10,0,-1)指的是10开始，步长为-1，不包括0\nprint('示例结果：',list(range(10,0,-1)))\n```\n\n```sh\n示例结果： [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n```\n\n**range类型的优点**\n不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要储存start,stop,step，只有当用到range对象时，才会去计算序列中的相关元素\n\n**python中数组的del,remove,pop**\n\n```sh\n#remove()删除首个符合条件的元素，并非特定的索引\nremove_array=['a','b','b','c']\nprint('remove()的返回值',remove_array.remove('b'))\nprint('remove()操作后数组的长度',len(remove_array))\nprint('remove()操作后数组的内容',list(remove_array))\n\n#pop返回的是你弹出的那个元素，参数为索引\npop_array=['a','b','c']\nprint('pop()的返回值',pop_array.pop(1))\nprint('pop()操作后数组的长度',len(pop_array))\nprint('pop()操作后数组的内容',list(pop_array))\n\n#del它是根据索引也就是元素所在位置来删除\ndel_array=['a','b','c']\ndel del_array[1]\nprint('del()操作后数组的长度',len(del_array))\nprint('del()操作后数组的内容',list(del_array))  \n```\n\n```sh\nremove()的返回值 None\nremove()操作后数组的长度 3\nremove()操作后数组的内容 ['a', 'b', 'c']\npop()的返回值 b\npop()操作后数组的长度 2\npop()操作后数组的内容 ['a', 'c']\ndel()操作后数组的长度 2\ndel()操作后数组的内容 ['a', 'c']\n```","source":"_posts/removeDuplicates.md","raw":"---\ntitle: removeDuplicates\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-01 12:19:02\npassword:\nsummary: 删除排序数组中的重复项\ntags:\n- python\n- Solution\n- Array\ncategories:\n- Solution\n---\n**题目:**\n**给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。**\n**由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。**\n**将最终结果插入 nums 的前 k 个位置后返回 k 。**\n**不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 <code>O\\(1\\)</code> 额外空间的条件下完成。**\n\n```sh\nclass Solution(object):\n    def removeDuplicates(self,nums: List[int]) -> int:\n        for i in range(len(nums),0,-1):\n            if nums[i] == nums[i-1]:\n                del(nums[i])\n        return len(nums)        \n```\n\n函数中参数后面的冒号是参数的类型建议符\n函数后面的箭头是函数返回值的类型建议符\n\npython中的<code>range\\(\\)</code>函数\n\nrange()函数用于生成一个整数序列\n\n第一种只有一个参数<code>range\\(stop\\)</code>\n```sh\n#range(10)指的是默认从0开始，步长为1，不包括10\nprint('示例结果：',list(range(10)))\n```\n\n```sh\n示例结果： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n第二种有两个参数<code>range\\(start,stop\\)</code>\n```sh\n#range(1,10)指的是1开始，步长为1，不包括10\nprint('示例结果：',list(range(1,10)))\n```\n\n```sh\n示例结果： [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n第三种有三个参数<code>range\\(start,stop,step\\)</code>\n```sh\n#range(1,10,2)指的是1开始，步长为2，不包括10\nprint('示例结果：',list(range(1,10,2)))\n```\n\n```sh\n示例结果： [1, 3, 5, 7, 9]\n```\n\n```sh\n#range(10,0,-1)指的是10开始，步长为-1，不包括0\nprint('示例结果：',list(range(10,0,-1)))\n```\n\n```sh\n示例结果： [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n```\n\n**range类型的优点**\n不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要储存start,stop,step，只有当用到range对象时，才会去计算序列中的相关元素\n\n**python中数组的del,remove,pop**\n\n```sh\n#remove()删除首个符合条件的元素，并非特定的索引\nremove_array=['a','b','b','c']\nprint('remove()的返回值',remove_array.remove('b'))\nprint('remove()操作后数组的长度',len(remove_array))\nprint('remove()操作后数组的内容',list(remove_array))\n\n#pop返回的是你弹出的那个元素，参数为索引\npop_array=['a','b','c']\nprint('pop()的返回值',pop_array.pop(1))\nprint('pop()操作后数组的长度',len(pop_array))\nprint('pop()操作后数组的内容',list(pop_array))\n\n#del它是根据索引也就是元素所在位置来删除\ndel_array=['a','b','c']\ndel del_array[1]\nprint('del()操作后数组的长度',len(del_array))\nprint('del()操作后数组的内容',list(del_array))  \n```\n\n```sh\nremove()的返回值 None\nremove()操作后数组的长度 3\nremove()操作后数组的内容 ['a', 'b', 'c']\npop()的返回值 b\npop()操作后数组的长度 2\npop()操作后数组的内容 ['a', 'c']\ndel()操作后数组的长度 2\ndel()操作后数组的内容 ['a', 'c']\n```","slug":"removeDuplicates","published":1,"updated":"2022-08-22T08:07:32.588Z","_id":"cl74e3am30001rcpgpbzbd8md","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>题目:</strong><br><strong>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。</strong><br><strong>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。</strong><br><strong>将最终结果插入 nums 的前 k 个位置后返回 k 。</strong><br><strong>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 <code>O(1)</code> 额外空间的条件下完成。</strong></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">class Solution(object):\n    def removeDuplicates(self,nums: List[int]) -> int:\n        for i in range(len(nums),0,-1):\n            if nums[i] == nums[i-1]:\n                del(nums[i])\n        return len(nums)        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数中参数后面的冒号是参数的类型建议符<br>函数后面的箭头是函数返回值的类型建议符</p>\n<p>python中的<code>range()</code>函数</p>\n<p>range()函数用于生成一个整数序列</p>\n<p>第一种只有一个参数<code>range(stop)</code></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#range(10)指的是默认从0开始，步长为1，不包括10\nprint('示例结果：',list(range(10)))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">示例结果： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第二种有两个参数<code>range(start,stop)</code></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#range(1,10)指的是1开始，步长为1，不包括10\nprint('示例结果：',list(range(1,10)))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">示例结果： [1, 2, 3, 4, 5, 6, 7, 8, 9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第三种有三个参数<code>range(start,stop,step)</code></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#range(1,10,2)指的是1开始，步长为2，不包括10\nprint('示例结果：',list(range(1,10,2)))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">示例结果： [1, 3, 5, 7, 9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#range(10,0,-1)指的是10开始，步长为-1，不包括0\nprint('示例结果：',list(range(10,0,-1)))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">示例结果： [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>range类型的优点</strong><br>不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要储存start,stop,step，只有当用到range对象时，才会去计算序列中的相关元素</p>\n<p><strong>python中数组的del,remove,pop</strong></p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#remove()删除首个符合条件的元素，并非特定的索引\nremove_array=['a','b','b','c']\nprint('remove()的返回值',remove_array.remove('b'))\nprint('remove()操作后数组的长度',len(remove_array))\nprint('remove()操作后数组的内容',list(remove_array))\n\n#pop返回的是你弹出的那个元素，参数为索引\npop_array=['a','b','c']\nprint('pop()的返回值',pop_array.pop(1))\nprint('pop()操作后数组的长度',len(pop_array))\nprint('pop()操作后数组的内容',list(pop_array))\n\n#del它是根据索引也就是元素所在位置来删除\ndel_array=['a','b','c']\ndel del_array[1]\nprint('del()操作后数组的长度',len(del_array))\nprint('del()操作后数组的内容',list(del_array))  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">remove()的返回值 None\nremove()操作后数组的长度 3\nremove()操作后数组的内容 ['a', 'b', 'c']\npop()的返回值 b\npop()操作后数组的长度 2\npop()操作后数组的内容 ['a', 'c']\ndel()操作后数组的长度 2\ndel()操作后数组的内容 ['a', 'c']<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p><strong>题目:</strong><br><strong>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。</strong><br><strong>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。</strong><br><strong>将最终结果插入 nums 的前 k 个位置后返回 k 。</strong><br><strong>不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 <code>O(1)</code> 额外空间的条件下完成。</strong></p>\n<pre><code class=\"sh\">class Solution(object):\n    def removeDuplicates(self,nums: List[int]) -&gt; int:\n        for i in range(len(nums),0,-1):\n            if nums[i] == nums[i-1]:\n                del(nums[i])\n        return len(nums)        </code></pre>\n<p>函数中参数后面的冒号是参数的类型建议符<br>函数后面的箭头是函数返回值的类型建议符</p>\n<p>python中的<code>range()</code>函数</p>\n<p>range()函数用于生成一个整数序列</p>\n<p>第一种只有一个参数<code>range(stop)</code></p>\n<pre><code class=\"sh\">#range(10)指的是默认从0开始，步长为1，不包括10\nprint(&#39;示例结果：&#39;,list(range(10)))</code></pre>\n<pre><code class=\"sh\">示例结果： [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>\n<p>第二种有两个参数<code>range(start,stop)</code></p>\n<pre><code class=\"sh\">#range(1,10)指的是1开始，步长为1，不包括10\nprint(&#39;示例结果：&#39;,list(range(1,10)))</code></pre>\n<pre><code class=\"sh\">示例结果： [1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>\n<p>第三种有三个参数<code>range(start,stop,step)</code></p>\n<pre><code class=\"sh\">#range(1,10,2)指的是1开始，步长为2，不包括10\nprint(&#39;示例结果：&#39;,list(range(1,10,2)))</code></pre>\n<pre><code class=\"sh\">示例结果： [1, 3, 5, 7, 9]</code></pre>\n<pre><code class=\"sh\">#range(10,0,-1)指的是10开始，步长为-1，不包括0\nprint(&#39;示例结果：&#39;,list(range(10,0,-1)))</code></pre>\n<pre><code class=\"sh\">示例结果： [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code></pre>\n<p><strong>range类型的优点</strong><br>不管range对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要储存start,stop,step，只有当用到range对象时，才会去计算序列中的相关元素</p>\n<p><strong>python中数组的del,remove,pop</strong></p>\n<pre><code class=\"sh\">#remove()删除首个符合条件的元素，并非特定的索引\nremove_array=[&#39;a&#39;,&#39;b&#39;,&#39;b&#39;,&#39;c&#39;]\nprint(&#39;remove()的返回值&#39;,remove_array.remove(&#39;b&#39;))\nprint(&#39;remove()操作后数组的长度&#39;,len(remove_array))\nprint(&#39;remove()操作后数组的内容&#39;,list(remove_array))\n\n#pop返回的是你弹出的那个元素，参数为索引\npop_array=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]\nprint(&#39;pop()的返回值&#39;,pop_array.pop(1))\nprint(&#39;pop()操作后数组的长度&#39;,len(pop_array))\nprint(&#39;pop()操作后数组的内容&#39;,list(pop_array))\n\n#del它是根据索引也就是元素所在位置来删除\ndel_array=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]\ndel del_array[1]\nprint(&#39;del()操作后数组的长度&#39;,len(del_array))\nprint(&#39;del()操作后数组的内容&#39;,list(del_array))  </code></pre>\n<pre><code class=\"sh\">remove()的返回值 None\nremove()操作后数组的长度 3\nremove()操作后数组的内容 [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\npop()的返回值 b\npop()操作后数组的长度 2\npop()操作后数组的内容 [&#39;a&#39;, &#39;c&#39;]\ndel()操作后数组的长度 2\ndel()操作后数组的内容 [&#39;a&#39;, &#39;c&#39;]</code></pre>\n"},{"title":"work","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-02T03:13:33.000Z","password":null,"summary":"遇到问题 & 如何处理","_content":"\n#### 测试\n测试","source":"_posts/work.md","raw":"---\ntitle: work\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-02 11:13:33\npassword:\nsummary: 遇到问题 & 如何处理\ntags: problem\ncategories:\n---\n\n#### 测试\n测试","slug":"work","published":1,"updated":"2022-08-09T04:20:06.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3amm000arcpgto3z06ma","content":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>测试</p>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>测试</p>\n"},{"title":"SQL固定分组统计","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-20T06:13:44.000Z","password":null,"summary":"SQL","_content":"\n## 前言\n*不不要在夕阳西下时幻想，要在旭日东升时努力。*\n\n## 问题\n统计每个订单各个规格的饮料销售数量以及总数.\n\n## 表\ngoods表\n\n```sh\n+----+----------+-------------+------+\n| id | good_sku | good_name   | size |\n+----+----------+-------------+------+\n|  1 | C2019001 | 可乐-0.5L   | 0.5L |\n|  2 | C2019002 | 可乐-1.5L   | 1.5L |\n|  3 | C2019003 | 可乐-2L     | 2L   |\n+----+----------+-------------+------+\n```\norders表\n\n```sh\n+----+--------------+--------+\n| id | order_num    | remark |\n+----+--------------+--------+\n|  1 | 20190220-001 | NULL   |\n|  2 | 20190220-002 | NULL   |\n|  3 | 20190220-003 | NULL   |\n|  4 | 20190220-004 | NULL   |\n|  5 | 20190220-005 | NULL   |\n+----+--------------+--------+\n```\n\norder_item表\n\n```sh\n+----+----------+----------+-------------+------+\n| id | order_id | good_sku | good_name   | num  |\n+----+----------+----------+-------------+------+\n|  1 |        1 | C2019001 | 可乐-0.5L   |    1 |\n|  2 |        1 | C2019002 | 可乐-1.5L   |    1 |\n|  3 |        2 | C2019001 | 可乐-0.5L   |    2 |\n|  4 |        2 | C2019002 | 可乐-1.5L   |    1 |\n|  5 |        3 | C2019001 | 可乐-0.5L   |    4 |\n|  6 |        3 | C2019002 | 可乐-1.5L   |    2 |\n|  7 |        3 | C2019003 | 可乐-2L     |    1 |\n|  8 |        4 | C2019003 | 可乐-2L     |    2 |\n|  9 |        5 | C2019001 | 可乐-0.5L   |    2 |\n| 10 |        5 | C2019002 | 可乐-1.5L   |    2 |\n| 11 |        5 | C2019003 | 可乐-2L     |    1 |\n+----+----------+----------+-------------+------+\n```\n\n\n## SQL\n\n```sh\nSELECT\n\to.*,\n\tsum(\n\t\tCASE WHEN g.size = '0.5L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '0.5L',\n\tsum(\n\t\tCASE WHEN g.size = '1.5L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '1.5L',\n\tsum(\n\t\tCASE WHEN g.size = '2L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '2L',\n\tsum(i.num) AS tol_num\nFROM\n\torders o\n\tLEFT JOIN order_item i ON o.id = i.order_id\n\tLEFT JOIN goods g ON i.good_sku = g.good_sku\nGROUP BY\n\to.id;\n```\n\n## SQL查询结果\n\n```sh\n+----+--------------+--------+------+------+------+---------+\n| id | order_num    | remark | 0.5L | 1.5L | 2L   | tol_num |\n+----+--------------+--------+------+------+------+---------+\n|  1 | 20190220-001 | NULL   |    1 |    1 |    0 |       2 |\n|  2 | 20190220-002 | NULL   |    2 |    1 |    0 |       3 |\n|  3 | 20190220-003 | NULL   |    4 |    2 |    1 |       7 |\n|  4 | 20190220-004 | NULL   |    0 |    0 |    2 |       2 |\n|  5 | 20190220-005 | NULL   |    2 |    2 |    1 |       5 |\n+----+--------------+--------+------+------+------+---------+\n```\n\n","source":"_posts/Mysql.md","raw":"---\ntitle: SQL固定分组统计\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-20 14:13:44\npassword:\nsummary: SQL\ntags:\n- SQL\ncategories:\n- SQL\n---\n\n## 前言\n*不不要在夕阳西下时幻想，要在旭日东升时努力。*\n\n## 问题\n统计每个订单各个规格的饮料销售数量以及总数.\n\n## 表\ngoods表\n\n```sh\n+----+----------+-------------+------+\n| id | good_sku | good_name   | size |\n+----+----------+-------------+------+\n|  1 | C2019001 | 可乐-0.5L   | 0.5L |\n|  2 | C2019002 | 可乐-1.5L   | 1.5L |\n|  3 | C2019003 | 可乐-2L     | 2L   |\n+----+----------+-------------+------+\n```\norders表\n\n```sh\n+----+--------------+--------+\n| id | order_num    | remark |\n+----+--------------+--------+\n|  1 | 20190220-001 | NULL   |\n|  2 | 20190220-002 | NULL   |\n|  3 | 20190220-003 | NULL   |\n|  4 | 20190220-004 | NULL   |\n|  5 | 20190220-005 | NULL   |\n+----+--------------+--------+\n```\n\norder_item表\n\n```sh\n+----+----------+----------+-------------+------+\n| id | order_id | good_sku | good_name   | num  |\n+----+----------+----------+-------------+------+\n|  1 |        1 | C2019001 | 可乐-0.5L   |    1 |\n|  2 |        1 | C2019002 | 可乐-1.5L   |    1 |\n|  3 |        2 | C2019001 | 可乐-0.5L   |    2 |\n|  4 |        2 | C2019002 | 可乐-1.5L   |    1 |\n|  5 |        3 | C2019001 | 可乐-0.5L   |    4 |\n|  6 |        3 | C2019002 | 可乐-1.5L   |    2 |\n|  7 |        3 | C2019003 | 可乐-2L     |    1 |\n|  8 |        4 | C2019003 | 可乐-2L     |    2 |\n|  9 |        5 | C2019001 | 可乐-0.5L   |    2 |\n| 10 |        5 | C2019002 | 可乐-1.5L   |    2 |\n| 11 |        5 | C2019003 | 可乐-2L     |    1 |\n+----+----------+----------+-------------+------+\n```\n\n\n## SQL\n\n```sh\nSELECT\n\to.*,\n\tsum(\n\t\tCASE WHEN g.size = '0.5L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '0.5L',\n\tsum(\n\t\tCASE WHEN g.size = '1.5L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '1.5L',\n\tsum(\n\t\tCASE WHEN g.size = '2L' THEN\n\t\t\ti.num\n\t\tELSE\n\t\t\t0\n\t\tEND) AS '2L',\n\tsum(i.num) AS tol_num\nFROM\n\torders o\n\tLEFT JOIN order_item i ON o.id = i.order_id\n\tLEFT JOIN goods g ON i.good_sku = g.good_sku\nGROUP BY\n\to.id;\n```\n\n## SQL查询结果\n\n```sh\n+----+--------------+--------+------+------+------+---------+\n| id | order_num    | remark | 0.5L | 1.5L | 2L   | tol_num |\n+----+--------------+--------+------+------+------+---------+\n|  1 | 20190220-001 | NULL   |    1 |    1 |    0 |       2 |\n|  2 | 20190220-002 | NULL   |    2 |    1 |    0 |       3 |\n|  3 | 20190220-003 | NULL   |    4 |    2 |    1 |       7 |\n|  4 | 20190220-004 | NULL   |    0 |    0 |    2 |       2 |\n|  5 | 20190220-005 | NULL   |    2 |    2 |    1 |       5 |\n+----+--------------+--------+------+------+------+---------+\n```\n\n","slug":"Mysql","published":1,"updated":"2022-07-22T05:26:56.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3amp000crcpgv3f5t0xc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>不不要在夕阳西下时幻想，要在旭日东升时努力。</em></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>统计每个订单各个规格的饮料销售数量以及总数.</p>\n<h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><p>goods表</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">+----+----------+-------------+------+\n| id | good_sku | good_name   | size |\n+----+----------+-------------+------+\n|  1 | C2019001 | 可乐-0.5L   | 0.5L |\n|  2 | C2019002 | 可乐-1.5L   | 1.5L |\n|  3 | C2019003 | 可乐-2L     | 2L   |\n+----+----------+-------------+------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>orders表</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">+----+--------------+--------+\n| id | order_num    | remark |\n+----+--------------+--------+\n|  1 | 20190220-001 | NULL   |\n|  2 | 20190220-002 | NULL   |\n|  3 | 20190220-003 | NULL   |\n|  4 | 20190220-004 | NULL   |\n|  5 | 20190220-005 | NULL   |\n+----+--------------+--------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>order_item表</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">+----+----------+----------+-------------+------+\n| id | order_id | good_sku | good_name   | num  |\n+----+----------+----------+-------------+------+\n|  1 |        1 | C2019001 | 可乐-0.5L   |    1 |\n|  2 |        1 | C2019002 | 可乐-1.5L   |    1 |\n|  3 |        2 | C2019001 | 可乐-0.5L   |    2 |\n|  4 |        2 | C2019002 | 可乐-1.5L   |    1 |\n|  5 |        3 | C2019001 | 可乐-0.5L   |    4 |\n|  6 |        3 | C2019002 | 可乐-1.5L   |    2 |\n|  7 |        3 | C2019003 | 可乐-2L     |    1 |\n|  8 |        4 | C2019003 | 可乐-2L     |    2 |\n|  9 |        5 | C2019001 | 可乐-0.5L   |    2 |\n| 10 |        5 | C2019002 | 可乐-1.5L   |    2 |\n| 11 |        5 | C2019003 | 可乐-2L     |    1 |\n+----+----------+----------+-------------+------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">SELECT\n    o.*,\n    sum(\n        CASE WHEN g.size = '0.5L' THEN\n            i.num\n        ELSE\n            0\n        END) AS '0.5L',\n    sum(\n        CASE WHEN g.size = '1.5L' THEN\n            i.num\n        ELSE\n            0\n        END) AS '1.5L',\n    sum(\n        CASE WHEN g.size = '2L' THEN\n            i.num\n        ELSE\n            0\n        END) AS '2L',\n    sum(i.num) AS tol_num\nFROM\n    orders o\n    LEFT JOIN order_item i ON o.id = i.order_id\n    LEFT JOIN goods g ON i.good_sku = g.good_sku\nGROUP BY\n    o.id;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SQL查询结果\"><a href=\"#SQL查询结果\" class=\"headerlink\" title=\"SQL查询结果\"></a>SQL查询结果</h2><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">+----+--------------+--------+------+------+------+---------+\n| id | order_num    | remark | 0.5L | 1.5L | 2L   | tol_num |\n+----+--------------+--------+------+------+------+---------+\n|  1 | 20190220-001 | NULL   |    1 |    1 |    0 |       2 |\n|  2 | 20190220-002 | NULL   |    2 |    1 |    0 |       3 |\n|  3 | 20190220-003 | NULL   |    4 |    2 |    1 |       7 |\n|  4 | 20190220-004 | NULL   |    0 |    0 |    2 |       2 |\n|  5 | 20190220-005 | NULL   |    2 |    2 |    1 |       5 |\n+----+--------------+--------+------+------+------+---------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>不不要在夕阳西下时幻想，要在旭日东升时努力。</em></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>统计每个订单各个规格的饮料销售数量以及总数.</p>\n<h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><p>goods表</p>\n<pre><code class=\"sh\">+----+----------+-------------+------+\n| id | good_sku | good_name   | size |\n+----+----------+-------------+------+\n|  1 | C2019001 | 可乐-0.5L   | 0.5L |\n|  2 | C2019002 | 可乐-1.5L   | 1.5L |\n|  3 | C2019003 | 可乐-2L     | 2L   |\n+----+----------+-------------+------+</code></pre>\n<p>orders表</p>\n<pre><code class=\"sh\">+----+--------------+--------+\n| id | order_num    | remark |\n+----+--------------+--------+\n|  1 | 20190220-001 | NULL   |\n|  2 | 20190220-002 | NULL   |\n|  3 | 20190220-003 | NULL   |\n|  4 | 20190220-004 | NULL   |\n|  5 | 20190220-005 | NULL   |\n+----+--------------+--------+</code></pre>\n<p>order_item表</p>\n<pre><code class=\"sh\">+----+----------+----------+-------------+------+\n| id | order_id | good_sku | good_name   | num  |\n+----+----------+----------+-------------+------+\n|  1 |        1 | C2019001 | 可乐-0.5L   |    1 |\n|  2 |        1 | C2019002 | 可乐-1.5L   |    1 |\n|  3 |        2 | C2019001 | 可乐-0.5L   |    2 |\n|  4 |        2 | C2019002 | 可乐-1.5L   |    1 |\n|  5 |        3 | C2019001 | 可乐-0.5L   |    4 |\n|  6 |        3 | C2019002 | 可乐-1.5L   |    2 |\n|  7 |        3 | C2019003 | 可乐-2L     |    1 |\n|  8 |        4 | C2019003 | 可乐-2L     |    2 |\n|  9 |        5 | C2019001 | 可乐-0.5L   |    2 |\n| 10 |        5 | C2019002 | 可乐-1.5L   |    2 |\n| 11 |        5 | C2019003 | 可乐-2L     |    1 |\n+----+----------+----------+-------------+------+</code></pre>\n<h2 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h2><pre><code class=\"sh\">SELECT\n    o.*,\n    sum(\n        CASE WHEN g.size = &#39;0.5L&#39; THEN\n            i.num\n        ELSE\n            0\n        END) AS &#39;0.5L&#39;,\n    sum(\n        CASE WHEN g.size = &#39;1.5L&#39; THEN\n            i.num\n        ELSE\n            0\n        END) AS &#39;1.5L&#39;,\n    sum(\n        CASE WHEN g.size = &#39;2L&#39; THEN\n            i.num\n        ELSE\n            0\n        END) AS &#39;2L&#39;,\n    sum(i.num) AS tol_num\nFROM\n    orders o\n    LEFT JOIN order_item i ON o.id = i.order_id\n    LEFT JOIN goods g ON i.good_sku = g.good_sku\nGROUP BY\n    o.id;</code></pre>\n<h2 id=\"SQL查询结果\"><a href=\"#SQL查询结果\" class=\"headerlink\" title=\"SQL查询结果\"></a>SQL查询结果</h2><pre><code class=\"sh\">+----+--------------+--------+------+------+------+---------+\n| id | order_num    | remark | 0.5L | 1.5L | 2L   | tol_num |\n+----+--------------+--------+------+------+------+---------+\n|  1 | 20190220-001 | NULL   |    1 |    1 |    0 |       2 |\n|  2 | 20190220-002 | NULL   |    2 |    1 |    0 |       3 |\n|  3 | 20190220-003 | NULL   |    4 |    2 |    1 |       7 |\n|  4 | 20190220-004 | NULL   |    0 |    0 |    2 |       2 |\n|  5 | 20190220-005 | NULL   |    2 |    2 |    1 |       5 |\n+----+--------------+--------+------+------+------+---------+</code></pre>\n"},{"title":"Linux 与 Shell","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-18T06:24:27.000Z","password":null,"summary":"Linux & Shell","_content":"## 前言\n网络安全\n## 操作系统简史\n操作系统可分为四个时代\n第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种\n第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。\n第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。\n第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。\n## Shell是什么\n![shuoming](shuoming.jpeg)\n## Bash是什么\n\n\n\n\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","source":"_posts/article-title.md","raw":"---\ntitle: Linux 与 Shell\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-18 14:24:27\npassword:\nsummary: Linux & Shell\ntags:\n- Linux\ncategories:\n- Linux\n---\n## 前言\n网络安全\n## 操作系统简史\n操作系统可分为四个时代\n第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种\n第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。\n第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。\n第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。\n## Shell是什么\n![shuoming](shuoming.jpeg)\n## Bash是什么\n\n\n\n\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","slug":"article-title","published":1,"updated":"2022-07-22T05:26:56.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3amr000frcpg81idmhwe","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网络安全</p>\n<h2 id=\"操作系统简史\"><a href=\"#操作系统简史\" class=\"headerlink\" title=\"操作系统简史\"></a>操作系统简史</h2><p>操作系统可分为四个时代<br>第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种<br>第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。<br>第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。<br>第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。</p>\n<h2 id=\"Shell是什么\"><a href=\"#Shell是什么\" class=\"headerlink\" title=\"Shell是什么\"></a>Shell是什么</h2><p><img src=\"shuoming.jpeg\" alt=\"shuoming\"></p>\n<h2 id=\"Bash是什么\"><a href=\"#Bash是什么\" class=\"headerlink\" title=\"Bash是什么\"></a>Bash是什么</h2><p><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网络安全</p>\n<h2 id=\"操作系统简史\"><a href=\"#操作系统简史\" class=\"headerlink\" title=\"操作系统简史\"></a>操作系统简史</h2><p>操作系统可分为四个时代<br>第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种<br>第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。<br>第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。<br>第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。</p>\n<h2 id=\"Shell是什么\"><a href=\"#Shell是什么\" class=\"headerlink\" title=\"Shell是什么\"></a>Shell是什么</h2><p><img src=\"shuoming.jpeg\" alt=\"shuoming\"></p>\n<h2 id=\"Bash是什么\"><a href=\"#Bash是什么\" class=\"headerlink\" title=\"Bash是什么\"></a>Bash是什么</h2><p><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n"},{"title":"网络安全","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-16T07:09:23.000Z","password":null,"summary":"网络安全","_content":"## 前言\n网络安全\n## 性质汇总\n网络安全\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","source":"_posts/wenzhangmoban.md","raw":"---\ntitle: 网络安全\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-16 15:09:23\npassword:\nsummary: 网络安全\ntags:\n- 网络安全\ncategories:\n- 网络安全\n---\n## 前言\n网络安全\n## 性质汇总\n网络安全\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","slug":"wenzhangmoban","published":1,"updated":"2022-07-22T05:26:56.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3amt000ircpgnc9kguqq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网络安全</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><p>网络安全<br><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网络安全</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><p>网络安全<br><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n"},{"title":"配置多个git","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-08-11T09:35:38.000Z","password":null,"summary":"git配置","_content":"\n#### 生成SSH\n\n第一个账号生成ssh key\n\n```sh\nssh-keygen -t rsa -C \"your1@email.com\"\n```\n\n第二个账号生成ssh key\n\n```sh\nssh-keygen -t rsa -C \"your2@email.com\"\n```\n\n#### 部署SSH KEY\n在GitLab/GitHub上部署SSH KEY\n\n#### 创建配置文件\n新建config没有后缀名\n\n##### 配置说明\n```sh\nHost    　　主机别名\nHostName　　服务器真实地址\nIdentityFile　　私钥文件路径\nPreferredAuthentications　　认证方式\nUser　　用户名\n```\n\n##### 配置内容\n```sh\n# 别名可以随意写 服务器真实地址是ip就是ip 是域名就是域名\n# 配置Github账号\nHost user1.github.com\nHostName github.com\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa\nPreferredAuthentications publickey\nUser user1\n\n# 配置GitLab\nHost xxxx\nHostName xx.xx.xx.xx\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa2\nPreferredAuthentications publickey\nUser user2\n```","source":"_posts/配置多个git.md","raw":"---\ntitle: 配置多个git\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-08-11 17:35:38\npassword:\nsummary: git配置\ntags:\n- git\ncategories:\n- git\n---\n\n#### 生成SSH\n\n第一个账号生成ssh key\n\n```sh\nssh-keygen -t rsa -C \"your1@email.com\"\n```\n\n第二个账号生成ssh key\n\n```sh\nssh-keygen -t rsa -C \"your2@email.com\"\n```\n\n#### 部署SSH KEY\n在GitLab/GitHub上部署SSH KEY\n\n#### 创建配置文件\n新建config没有后缀名\n\n##### 配置说明\n```sh\nHost    　　主机别名\nHostName　　服务器真实地址\nIdentityFile　　私钥文件路径\nPreferredAuthentications　　认证方式\nUser　　用户名\n```\n\n##### 配置内容\n```sh\n# 别名可以随意写 服务器真实地址是ip就是ip 是域名就是域名\n# 配置Github账号\nHost user1.github.com\nHostName github.com\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa\nPreferredAuthentications publickey\nUser user1\n\n# 配置GitLab\nHost xxxx\nHostName xx.xx.xx.xx\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa2\nPreferredAuthentications publickey\nUser user2\n```","slug":"配置多个git","published":1,"updated":"2022-08-12T03:14:01.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3amv000krcpg25fc5e9r","content":"<h4 id=\"生成SSH\"><a href=\"#生成SSH\" class=\"headerlink\" title=\"生成SSH\"></a>生成SSH</h4><p>第一个账号生成ssh key</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">ssh-keygen -t rsa -C \"your1@email.com\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>第二个账号生成ssh key</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">ssh-keygen -t rsa -C \"your2@email.com\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"部署SSH-KEY\"><a href=\"#部署SSH-KEY\" class=\"headerlink\" title=\"部署SSH KEY\"></a>部署SSH KEY</h4><p>在GitLab/GitHub上部署SSH KEY</p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>新建config没有后缀名</p>\n<h5 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">Host    　　主机别名\nHostName　　服务器真实地址\nIdentityFile　　私钥文件路径\nPreferredAuthentications　　认证方式\nUser　　用户名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"配置内容\"><a href=\"#配置内容\" class=\"headerlink\" title=\"配置内容\"></a>配置内容</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\"># 别名可以随意写 服务器真实地址是ip就是ip 是域名就是域名\n# 配置Github账号\nHost user1.github.com\nHostName github.com\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa\nPreferredAuthentications publickey\nUser user1\n\n# 配置GitLab\nHost xxxx\nHostName xx.xx.xx.xx\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa2\nPreferredAuthentications publickey\nUser user2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h4 id=\"生成SSH\"><a href=\"#生成SSH\" class=\"headerlink\" title=\"生成SSH\"></a>生成SSH</h4><p>第一个账号生成ssh key</p>\n<pre><code class=\"sh\">ssh-keygen -t rsa -C &quot;your1@email.com&quot;</code></pre>\n<p>第二个账号生成ssh key</p>\n<pre><code class=\"sh\">ssh-keygen -t rsa -C &quot;your2@email.com&quot;</code></pre>\n<h4 id=\"部署SSH-KEY\"><a href=\"#部署SSH-KEY\" class=\"headerlink\" title=\"部署SSH KEY\"></a>部署SSH KEY</h4><p>在GitLab/GitHub上部署SSH KEY</p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>新建config没有后缀名</p>\n<h5 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h5><pre><code class=\"sh\">Host    　　主机别名\nHostName　　服务器真实地址\nIdentityFile　　私钥文件路径\nPreferredAuthentications　　认证方式\nUser　　用户名</code></pre>\n<h5 id=\"配置内容\"><a href=\"#配置内容\" class=\"headerlink\" title=\"配置内容\"></a>配置内容</h5><pre><code class=\"sh\"># 别名可以随意写 服务器真实地址是ip就是ip 是域名就是域名\n# 配置Github账号\nHost user1.github.com\nHostName github.com\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa\nPreferredAuthentications publickey\nUser user1\n\n# 配置GitLab\nHost xxxx\nHostName xx.xx.xx.xx\nIdentityFile C:\\\\Users\\\\TheAnswer\\\\.ssh\\\\id_rsa2\nPreferredAuthentications publickey\nUser user2</code></pre>\n"},{"title":"Linux 与 Shell","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-18T06:24:27.000Z","password":null,"summary":"Linux & Shell","_content":"## 前言\n*不渴望能够一跃千里，只希望每天能够前进一步。*\n\n## 操作系统简史\n四个时代\n第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种。\n第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。\n第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。\n第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。\n## Shell是什么\n![Linux](Linux.png)\nShell是用户与内核交互操作的接口，它接收用户的命令然后传递给内核，内核执行命令并将执行结果通过Shell返回给用户。\nShell既是一种命令解释器，也是一种编程语言。Shell有很多种版本，主要的版本如下：\nBourne Shell，源于UNIX早期版本的Shell。\nBash，又名Bourne Again Shell，来自GUN项目，它是Linux主要的Shell。\nKorn Shell，它是对Bourne Shell的发展。\nC shell，是SUN公司Shell的BSD版本。\n## Bash是什么\n\nBash是Shell的一种，在Linux中常用的Shell就是Bourne-Again shell（简称bash）。\nBash有很灵活和强大的编程接口，同时又有很友好的用户界面。\n\n**Bash的特点：** \n\n**•命令历史、命令补全** \n**•管道、重定向** \n**•命令别名** \n**•命令行编辑** \n**•命令行展开** \n**•文件名通配** \n**•变量**\n**•编程**\n\n## 常用命令\n\n\n### 文件系统管理命令\n\n对文件及目录的管理操作包括新建、浏览、编辑、修改、删除等。\n\n#### ls命令\n\nls命令：显示文件信息命令\n\n功能：ls命令显示关于文件的信息，其中的文件包括任何类型的文件和目录。\n\n用法1：<code>ls</code>\n\n```\n[root@TheAnswer test]# ls\na  a.txt\n```\ntest文件夹下使用ls命令可以看到有一个a文件夹和一个a.txt文件\n\n用法2：<code>ls -l</code>\n该命令显示文件或者目录下的文件的详细信息，包括文件类型及权限、连接数、文件所有者及所有者所属的组、文件大小、访问日期、时间、名称。\n\n```sh\n[root@TheAnswer test]# ls -l\n总用量 8\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\n-rw-r--r-- 1 root root   14 2月  11 20:43 a.txt\n```\n小提示：每一列的含义\n![Linux](lsjieshitu.png)\n\n**”标号1“：**\n\n\n\\-  |  d  |  p  | l  |  b |  c |  s\n:--:|:--: |:--:| :--:|:--:|:--:|:--:\n普通文件| 目录文件 | 管理文件| 链接文件 | 块设备文件 | 字符设备文件 | 套接字文件 \n\n\n**”标号2“：**所有者/所有者权限\n\n\n**”标号3“：**组用户权限（一个组中除所有者拥有的权限）\n\n\n**”标号4“：**其他用户权限（除当前所有者的组，其他组的权限）\n\n**文件权限**\n\nr  |  w  |  x  | \\- \n:--:|:--: |:--:| :--:\n读权限| 写权限 | 可执行权限| 无权限 \n   \n\n**”标号5“：**如果是普通文件则为连接数,如果是目录文件则为第一级子目录数\n\n\n**”标号6“：**用户名\n\n\n**”标号7“：**组名\n\n\n**”标号8“：**表示文件大小，单位为字节\n\n\n**”标号9“：**表示最后修改时间\n\n\n**”标号10“：**文件名\n\n\n**”标号11“：**文件后缀\n\n\n用法3：<code>ls -l \\[文件包含的字符\\]\\*</code>\n\ntest目录下文件如下 a，a123，a.txt，bcd，下面使用ls -l a* 这个命令。\n\n```sh\n[root@TheAnswer test]# ls -l\n总用量 16\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 a123\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 bcd\n```\n\nls -l a\\* 该命令是显示当前目录下以a开头的文件或目录的详细信息。\\*是文件名称的匹配符，表示可以匹配任意字符串。\n\n```\n[root@TheAnswer test]# ls -l a*\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\n\na:\n总用量 4\ndrwxr-xr-x 3 root root 4096 2月  11 20:39 b\n\na123:\n总用量 0\n```\n用法4：<code>ls -a 、ls -al</code> \nls -a 会把隐藏文件显示出来，如果要想看到文件的信息的话就可以使用 ls -al。\n\n```sh\n[root@TheAnswer test]# ls -a\n.  ..  a  a123  .abc.txt  a.txt  bcd\n\n[root@TheAnswer test]# ls -al\n总用量 24\ndrwxr-xr-x  5 root root 4096 2月  11 18:31 .\ndr-xr-x---. 8 root root 4096 2月  11 17:12 ..\ndrwxr-xr-x  3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 a123\n-rw-r--r--  1 root root    0 2月  11 18:31 .abc.txt\n-rw-r--r--  1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 bcd\n```\n\n#### pwd命令\n\npwd命令：显示用户当前工作目录，\n\n功能：显示当前目录在文件系统层次中的位置。\n\n用法：<code>pwd</code>\n\n先进入到一个工作目录下\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n```\n然后输入pwd\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n```\n\n```sh\n[root@TheAnswer a]# pwd\n/root/test/a\n```\n\n#### 目录管理命令-mkdir/rmdir\n\n语法：\nmkdir\\[参数\\] 目录名称\nrmdir\\[参数\\] 目录名称\n\n功能：创建目录和删除目录。mkdir命令表示在当前目录中建立一个新目录，rmdir表示删除指定的目录。\n-p表示递归删除或者创建目录。\n\n用法：<code>mkdir/rmdir -p 目录</code>\n\n当前目录创建目录/删除目录\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# mkdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  test1\n[root@TheAnswer test]# rmdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n递归创建/删除目录\n\n```sh\n[root@TheAnswer test]# mkdir -p test1/test2/test3\n[root@TheAnswer test]# cd test1/test2/test3\n[root@TheAnswer test3]# pwd\n/root/test/test1/test2/test3\n[root@TheAnswer test]# rmdir -p test1/test2/test3\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n#### 删除文件工具-rm\n\n语法：\nrm\\[参数\\] file1 file2 ......\nrm\\[参数\\] dir1 dir2 dir ......\n\n功能：rm用来删除一个或多个文件的工具。并且可以用于删除非空目录。\n也可以使用参数<code>-rf</code>强制删除一个非空目录。\n\n参数：\n<code>-f</code> 表示不显示警告或提示直接删除。\n<code>-i</code> 表示删除文件时显示警告信息并提示是否删除。\n<code>-r</code>或<code>-R</code>表示可以递归删除整个目录包括子目录及目录下的所有文件。\n\n用法：<code>rm -i file</code>\n\n删除文件\n\n先用<code>touch b.txt </code>创建一个文件\n\n```sh\n[root@TheAnswer test]# touch b.txt\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  b.txt\n[root@TheAnswer test]# rm -i b.txt\nrm：是否删除普通空文件 \"b.txt\"？y\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n用法：<code>rm -ir dir</code>\n\n删除目录及所有下级目录和文件\n\n先用<code>touch b.txt </code>创建一个文件\n\n```sh\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# rmdir a\nrmdir: 删除 \"a\" 失败: 目录非空\n[root@TheAnswer test]# rm -ir a\nrm：是否进入目录\"a\"? y\nrm：是否进入目录\"a/b\"? y\nrm：是否进入目录\"a/b/c\"? y\nrm：是否进入目录\"a/b/c/d\"? y\nrm：是否进入目录\"a/b/c/d/e\"? y\nrm：是否删除普通空文件 \"a/b/c/d/e/e.txt\"？y\nrm：是否删除目录 \"a/b/c/d/e\"？y\nrm：是否删除目录 \"a/b/c/d\"？y\nrm：是否删除目录 \"a/b/c\"？y\nrm：是否删除目录 \"a/b\"？y\nrm：是否删除目录 \"a\"？y\n```\n\n用法：<code>rm -rf dir</code>\n\n不需要提示删除目录及所有下级目录和文件\n\n#### 文件名修改命令-mv\n\n语法：\nmv 原文件名或目录名新文件名或目录名\n\n功能：文件更名或搬移。\n\n\n用法：<code>mv filename1 filename2</code>\n\n将名称为filename1的文件改名为filename2并删除原文件。\n\n```sh\n[root@TheAnswer test]# ls\na123  a.txt  bcd\n[root@TheAnswer test]# mv a.txt abcd.txt\n[root@TheAnswer test]# ls\na123  abcd.txt  bcd\n[root@TheAnswer test]#\n```\n\n用法：<code>mv filename1 path/filename2</code>\n\n将名称为filename1的文件移动到path路径下并改名为filename2并删除原文件。\n\n```sh\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  a.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv a.txt abcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv abcd.txt bcd/bcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# cd bcd\n[root@izbp14yziiuvu2qh2n015xz bcd]# ls\nbcd.txt\n```\n\n\n## shell\n\n### 比较运算符\n\n\\-eq  |  \\-ne  |  \\-gt  | \\-lt  | ge  | le\n:--:|:--: |:--:| :--: | :--: | :--:\n等于| 不等于 | 大于|  小于  |  大于等于 |  小于等于\n\n### 函数\n\n#### 函数语法\n\n<code>\\[function\\] name(){函数体}\\[重定向\\]</code>\n其中function关键字和重定向是可选的\n\n#### 函数使用\n\n<code>name 参数列表</code>\n\n#### 写一个max函数返回3个参数中的最大值\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ max -lt $2 ];then\nmax=$2\nfi\nif [ max -lt $3 ];then\nmax=$3\nfi\nreturn max\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit\n\n```\n\n执行上面程序报错\n\n```sh\n./max.sh: 第 11 行:[: max: 期待整数表达式\n./max.sh: 第 14 行:[: max: 期待整数表达式\n./max.sh: 第 17 行:return: max: 需要数字参数\nthe max number of 1 2 3 is : 255\n```\n\n可能是max 有歧义 用 ${max} 或者 $max 代替max成功了\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ ${max} -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit\n```\n\n结果\n```sh\nthe max number of 1 2 3 is : 3\n```\n\n### $?\n\n#### 获取上一个命令的退出状态\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 4\necho \"the max number is : $?\"\nexit\n```\n\nmax.sh中max方法传进去4个参数，这个时候会退出脚本且状态为1\n\n```sh\n[root@izbp14yziiuvu2qh2n015xz test]# echo $?\n1\n```\n\n#### 获取函数的返回值\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 \necho \"the max number is : $?\"\nexit\n```\n结果\n\n```sh\nthe max number is : 28\n```\n\n把最大值得参数改为255\n\n结果\n```sh\nthe max number is : 255\n```\n把最大值得参数改为256\n\n```sh\nthe max number is : 0\n```\n这个是后$？获取值是0\n\n\n$?获取的返回值是0~255之前，超过255开始从0计算 也就是说 256 输出 0，257输出1，258输出2\n\n怎么获取返回值？\n\n用全局变量来获取\n\n<code>$max</code>\n\n注：在 Shell 函数中定义的变量默认也是全局变量，它和在函数外部定义变量拥有一样的效果\n\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","source":"_posts/article-Linux.md","raw":"---\ntitle: Linux 与 Shell\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-18 14:24:27\npassword:\nsummary: Linux & Shell\ntags:\n- Linux\ncategories:\n- Linux\n---\n## 前言\n*不渴望能够一跃千里，只希望每天能够前进一步。*\n\n## 操作系统简史\n四个时代\n第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种。\n第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。\n第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。\n第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。\n## Shell是什么\n![Linux](Linux.png)\nShell是用户与内核交互操作的接口，它接收用户的命令然后传递给内核，内核执行命令并将执行结果通过Shell返回给用户。\nShell既是一种命令解释器，也是一种编程语言。Shell有很多种版本，主要的版本如下：\nBourne Shell，源于UNIX早期版本的Shell。\nBash，又名Bourne Again Shell，来自GUN项目，它是Linux主要的Shell。\nKorn Shell，它是对Bourne Shell的发展。\nC shell，是SUN公司Shell的BSD版本。\n## Bash是什么\n\nBash是Shell的一种，在Linux中常用的Shell就是Bourne-Again shell（简称bash）。\nBash有很灵活和强大的编程接口，同时又有很友好的用户界面。\n\n**Bash的特点：** \n\n**•命令历史、命令补全** \n**•管道、重定向** \n**•命令别名** \n**•命令行编辑** \n**•命令行展开** \n**•文件名通配** \n**•变量**\n**•编程**\n\n## 常用命令\n\n\n### 文件系统管理命令\n\n对文件及目录的管理操作包括新建、浏览、编辑、修改、删除等。\n\n#### ls命令\n\nls命令：显示文件信息命令\n\n功能：ls命令显示关于文件的信息，其中的文件包括任何类型的文件和目录。\n\n用法1：<code>ls</code>\n\n```\n[root@TheAnswer test]# ls\na  a.txt\n```\ntest文件夹下使用ls命令可以看到有一个a文件夹和一个a.txt文件\n\n用法2：<code>ls -l</code>\n该命令显示文件或者目录下的文件的详细信息，包括文件类型及权限、连接数、文件所有者及所有者所属的组、文件大小、访问日期、时间、名称。\n\n```sh\n[root@TheAnswer test]# ls -l\n总用量 8\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\n-rw-r--r-- 1 root root   14 2月  11 20:43 a.txt\n```\n小提示：每一列的含义\n![Linux](lsjieshitu.png)\n\n**”标号1“：**\n\n\n\\-  |  d  |  p  | l  |  b |  c |  s\n:--:|:--: |:--:| :--:|:--:|:--:|:--:\n普通文件| 目录文件 | 管理文件| 链接文件 | 块设备文件 | 字符设备文件 | 套接字文件 \n\n\n**”标号2“：**所有者/所有者权限\n\n\n**”标号3“：**组用户权限（一个组中除所有者拥有的权限）\n\n\n**”标号4“：**其他用户权限（除当前所有者的组，其他组的权限）\n\n**文件权限**\n\nr  |  w  |  x  | \\- \n:--:|:--: |:--:| :--:\n读权限| 写权限 | 可执行权限| 无权限 \n   \n\n**”标号5“：**如果是普通文件则为连接数,如果是目录文件则为第一级子目录数\n\n\n**”标号6“：**用户名\n\n\n**”标号7“：**组名\n\n\n**”标号8“：**表示文件大小，单位为字节\n\n\n**”标号9“：**表示最后修改时间\n\n\n**”标号10“：**文件名\n\n\n**”标号11“：**文件后缀\n\n\n用法3：<code>ls -l \\[文件包含的字符\\]\\*</code>\n\ntest目录下文件如下 a，a123，a.txt，bcd，下面使用ls -l a* 这个命令。\n\n```sh\n[root@TheAnswer test]# ls -l\n总用量 16\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 a123\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 bcd\n```\n\nls -l a\\* 该命令是显示当前目录下以a开头的文件或目录的详细信息。\\*是文件名称的匹配符，表示可以匹配任意字符串。\n\n```\n[root@TheAnswer test]# ls -l a*\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\n\na:\n总用量 4\ndrwxr-xr-x 3 root root 4096 2月  11 20:39 b\n\na123:\n总用量 0\n```\n用法4：<code>ls -a 、ls -al</code> \nls -a 会把隐藏文件显示出来，如果要想看到文件的信息的话就可以使用 ls -al。\n\n```sh\n[root@TheAnswer test]# ls -a\n.  ..  a  a123  .abc.txt  a.txt  bcd\n\n[root@TheAnswer test]# ls -al\n总用量 24\ndrwxr-xr-x  5 root root 4096 2月  11 18:31 .\ndr-xr-x---. 8 root root 4096 2月  11 17:12 ..\ndrwxr-xr-x  3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 a123\n-rw-r--r--  1 root root    0 2月  11 18:31 .abc.txt\n-rw-r--r--  1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 bcd\n```\n\n#### pwd命令\n\npwd命令：显示用户当前工作目录，\n\n功能：显示当前目录在文件系统层次中的位置。\n\n用法：<code>pwd</code>\n\n先进入到一个工作目录下\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n```\n然后输入pwd\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n```\n\n```sh\n[root@TheAnswer a]# pwd\n/root/test/a\n```\n\n#### 目录管理命令-mkdir/rmdir\n\n语法：\nmkdir\\[参数\\] 目录名称\nrmdir\\[参数\\] 目录名称\n\n功能：创建目录和删除目录。mkdir命令表示在当前目录中建立一个新目录，rmdir表示删除指定的目录。\n-p表示递归删除或者创建目录。\n\n用法：<code>mkdir/rmdir -p 目录</code>\n\n当前目录创建目录/删除目录\n\n```sh\n[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# mkdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  test1\n[root@TheAnswer test]# rmdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n递归创建/删除目录\n\n```sh\n[root@TheAnswer test]# mkdir -p test1/test2/test3\n[root@TheAnswer test]# cd test1/test2/test3\n[root@TheAnswer test3]# pwd\n/root/test/test1/test2/test3\n[root@TheAnswer test]# rmdir -p test1/test2/test3\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n#### 删除文件工具-rm\n\n语法：\nrm\\[参数\\] file1 file2 ......\nrm\\[参数\\] dir1 dir2 dir ......\n\n功能：rm用来删除一个或多个文件的工具。并且可以用于删除非空目录。\n也可以使用参数<code>-rf</code>强制删除一个非空目录。\n\n参数：\n<code>-f</code> 表示不显示警告或提示直接删除。\n<code>-i</code> 表示删除文件时显示警告信息并提示是否删除。\n<code>-r</code>或<code>-R</code>表示可以递归删除整个目录包括子目录及目录下的所有文件。\n\n用法：<code>rm -i file</code>\n\n删除文件\n\n先用<code>touch b.txt </code>创建一个文件\n\n```sh\n[root@TheAnswer test]# touch b.txt\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  b.txt\n[root@TheAnswer test]# rm -i b.txt\nrm：是否删除普通空文件 \"b.txt\"？y\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n```\n\n用法：<code>rm -ir dir</code>\n\n删除目录及所有下级目录和文件\n\n先用<code>touch b.txt </code>创建一个文件\n\n```sh\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# rmdir a\nrmdir: 删除 \"a\" 失败: 目录非空\n[root@TheAnswer test]# rm -ir a\nrm：是否进入目录\"a\"? y\nrm：是否进入目录\"a/b\"? y\nrm：是否进入目录\"a/b/c\"? y\nrm：是否进入目录\"a/b/c/d\"? y\nrm：是否进入目录\"a/b/c/d/e\"? y\nrm：是否删除普通空文件 \"a/b/c/d/e/e.txt\"？y\nrm：是否删除目录 \"a/b/c/d/e\"？y\nrm：是否删除目录 \"a/b/c/d\"？y\nrm：是否删除目录 \"a/b/c\"？y\nrm：是否删除目录 \"a/b\"？y\nrm：是否删除目录 \"a\"？y\n```\n\n用法：<code>rm -rf dir</code>\n\n不需要提示删除目录及所有下级目录和文件\n\n#### 文件名修改命令-mv\n\n语法：\nmv 原文件名或目录名新文件名或目录名\n\n功能：文件更名或搬移。\n\n\n用法：<code>mv filename1 filename2</code>\n\n将名称为filename1的文件改名为filename2并删除原文件。\n\n```sh\n[root@TheAnswer test]# ls\na123  a.txt  bcd\n[root@TheAnswer test]# mv a.txt abcd.txt\n[root@TheAnswer test]# ls\na123  abcd.txt  bcd\n[root@TheAnswer test]#\n```\n\n用法：<code>mv filename1 path/filename2</code>\n\n将名称为filename1的文件移动到path路径下并改名为filename2并删除原文件。\n\n```sh\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  a.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv a.txt abcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv abcd.txt bcd/bcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# cd bcd\n[root@izbp14yziiuvu2qh2n015xz bcd]# ls\nbcd.txt\n```\n\n\n## shell\n\n### 比较运算符\n\n\\-eq  |  \\-ne  |  \\-gt  | \\-lt  | ge  | le\n:--:|:--: |:--:| :--: | :--: | :--:\n等于| 不等于 | 大于|  小于  |  大于等于 |  小于等于\n\n### 函数\n\n#### 函数语法\n\n<code>\\[function\\] name(){函数体}\\[重定向\\]</code>\n其中function关键字和重定向是可选的\n\n#### 函数使用\n\n<code>name 参数列表</code>\n\n#### 写一个max函数返回3个参数中的最大值\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ max -lt $2 ];then\nmax=$2\nfi\nif [ max -lt $3 ];then\nmax=$3\nfi\nreturn max\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit\n\n```\n\n执行上面程序报错\n\n```sh\n./max.sh: 第 11 行:[: max: 期待整数表达式\n./max.sh: 第 14 行:[: max: 期待整数表达式\n./max.sh: 第 17 行:return: max: 需要数字参数\nthe max number of 1 2 3 is : 255\n```\n\n可能是max 有歧义 用 ${max} 或者 $max 代替max成功了\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ ${max} -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit\n```\n\n结果\n```sh\nthe max number of 1 2 3 is : 3\n```\n\n### $?\n\n#### 获取上一个命令的退出状态\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 4\necho \"the max number is : $?\"\nexit\n```\n\nmax.sh中max方法传进去4个参数，这个时候会退出脚本且状态为1\n\n```sh\n[root@izbp14yziiuvu2qh2n015xz test]# echo $?\n1\n```\n\n#### 获取函数的返回值\n\n```sh\n#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 \necho \"the max number is : $?\"\nexit\n```\n结果\n\n```sh\nthe max number is : 28\n```\n\n把最大值得参数改为255\n\n结果\n```sh\nthe max number is : 255\n```\n把最大值得参数改为256\n\n```sh\nthe max number is : 0\n```\n这个是后$？获取值是0\n\n\n$?获取的返回值是0~255之前，超过255开始从0计算 也就是说 256 输出 0，257输出1，258输出2\n\n怎么获取返回值？\n\n用全局变量来获取\n\n<code>$max</code>\n\n注：在 Shell 函数中定义的变量默认也是全局变量，它和在函数外部定义变量拥有一样的效果\n\n**百度一下**  \n[https://www.baidu.com](https://www.baidu.com)\n\n","slug":"article-Linux","published":1,"updated":"2022-07-22T05:26:56.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3anc0013rcpgkp1oa04y","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>不渴望能够一跃千里，只希望每天能够前进一步。</em></p>\n<h2 id=\"操作系统简史\"><a href=\"#操作系统简史\" class=\"headerlink\" title=\"操作系统简史\"></a>操作系统简史</h2><p>四个时代<br>第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种。<br>第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。<br>第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。<br>第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。</p>\n<h2 id=\"Shell是什么\"><a href=\"#Shell是什么\" class=\"headerlink\" title=\"Shell是什么\"></a>Shell是什么</h2><p><img src=\"Linux.png\" alt=\"Linux\"><br>Shell是用户与内核交互操作的接口，它接收用户的命令然后传递给内核，内核执行命令并将执行结果通过Shell返回给用户。<br>Shell既是一种命令解释器，也是一种编程语言。Shell有很多种版本，主要的版本如下：<br>Bourne Shell，源于UNIX早期版本的Shell。<br>Bash，又名Bourne Again Shell，来自GUN项目，它是Linux主要的Shell。<br>Korn Shell，它是对Bourne Shell的发展。<br>C shell，是SUN公司Shell的BSD版本。</p>\n<h2 id=\"Bash是什么\"><a href=\"#Bash是什么\" class=\"headerlink\" title=\"Bash是什么\"></a>Bash是什么</h2><p>Bash是Shell的一种，在Linux中常用的Shell就是Bourne-Again shell（简称bash）。<br>Bash有很灵活和强大的编程接口，同时又有很友好的用户界面。</p>\n<p><strong>Bash的特点：</strong> </p>\n<p><strong>•命令历史、命令补全</strong><br><strong>•管道、重定向</strong><br><strong>•命令别名</strong><br><strong>•命令行编辑</strong><br><strong>•命令行展开</strong><br><strong>•文件名通配</strong><br><strong>•变量</strong><br><strong>•编程</strong></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"文件系统管理命令\"><a href=\"#文件系统管理命令\" class=\"headerlink\" title=\"文件系统管理命令\"></a>文件系统管理命令</h3><p>对文件及目录的管理操作包括新建、浏览、编辑、修改、删除等。</p>\n<h4 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h4><p>ls命令：显示文件信息命令</p>\n<p>功能：ls命令显示关于文件的信息，其中的文件包括任何类型的文件和目录。</p>\n<p>用法1：<code>ls</code></p>\n<pre><code>[root@TheAnswer test]# ls\na  a.txt</code></pre><p>test文件夹下使用ls命令可以看到有一个a文件夹和一个a.txt文件</p>\n<p>用法2：<code>ls -l</code><br>该命令显示文件或者目录下的文件的详细信息，包括文件类型及权限、连接数、文件所有者及所有者所属的组、文件大小、访问日期、时间、名称。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# ls -l\n总用量 8\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\n-rw-r--r-- 1 root root   14 2月  11 20:43 a.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>小提示：每一列的含义<br><img src=\"lsjieshitu.png\" alt=\"Linux\"></p>\n<p><strong>”标号1“：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">-</th>\n<th align=\"center\">d</th>\n<th align=\"center\">p</th>\n<th align=\"center\">l</th>\n<th align=\"center\">b</th>\n<th align=\"center\">c</th>\n<th align=\"center\">s</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">普通文件</td>\n<td align=\"center\">目录文件</td>\n<td align=\"center\">管理文件</td>\n<td align=\"center\">链接文件</td>\n<td align=\"center\">块设备文件</td>\n<td align=\"center\">字符设备文件</td>\n<td align=\"center\">套接字文件</td>\n</tr>\n</tbody></table>\n<p><strong>”标号2“：</strong>所有者/所有者权限</p>\n<p><strong>”标号3“：</strong>组用户权限（一个组中除所有者拥有的权限）</p>\n<p><strong>”标号4“：</strong>其他用户权限（除当前所有者的组，其他组的权限）</p>\n<p><strong>文件权限</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">r</th>\n<th align=\"center\">w</th>\n<th align=\"center\">x</th>\n<th align=\"center\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">读权限</td>\n<td align=\"center\">写权限</td>\n<td align=\"center\">可执行权限</td>\n<td align=\"center\">无权限</td>\n</tr>\n</tbody></table>\n<p><strong>”标号5“：</strong>如果是普通文件则为连接数,如果是目录文件则为第一级子目录数</p>\n<p><strong>”标号6“：</strong>用户名</p>\n<p><strong>”标号7“：</strong>组名</p>\n<p><strong>”标号8“：</strong>表示文件大小，单位为字节</p>\n<p><strong>”标号9“：</strong>表示最后修改时间</p>\n<p><strong>”标号10“：</strong>文件名</p>\n<p><strong>”标号11“：</strong>文件后缀</p>\n<p>用法3：<code>ls -l [文件包含的字符]*</code></p>\n<p>test目录下文件如下 a，a123，a.txt，bcd，下面使用ls -l a* 这个命令。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# ls -l\n总用量 16\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 a123\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 bcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ls -l a* 该命令是显示当前目录下以a开头的文件或目录的详细信息。*是文件名称的匹配符，表示可以匹配任意字符串。</p>\n<pre><code>[root@TheAnswer test]# ls -l a*\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\n\na:\n总用量 4\ndrwxr-xr-x 3 root root 4096 2月  11 20:39 b\n\na123:\n总用量 0</code></pre><p>用法4：<code>ls -a 、ls -al</code><br>ls -a 会把隐藏文件显示出来，如果要想看到文件的信息的话就可以使用 ls -al。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# ls -a\n.  ..  a  a123  .abc.txt  a.txt  bcd\n\n[root@TheAnswer test]# ls -al\n总用量 24\ndrwxr-xr-x  5 root root 4096 2月  11 18:31 .\ndr-xr-x---. 8 root root 4096 2月  11 17:12 ..\ndrwxr-xr-x  3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 a123\n-rw-r--r--  1 root root    0 2月  11 18:31 .abc.txt\n-rw-r--r--  1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 bcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"pwd命令\"><a href=\"#pwd命令\" class=\"headerlink\" title=\"pwd命令\"></a>pwd命令</h4><p>pwd命令：显示用户当前工作目录，</p>\n<p>功能：显示当前目录在文件系统层次中的位置。</p>\n<p>用法：<code>pwd</code></p>\n<p>先进入到一个工作目录下</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>然后输入pwd</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer a]# pwd\n/root/test/a<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"目录管理命令-mkdir-rmdir\"><a href=\"#目录管理命令-mkdir-rmdir\" class=\"headerlink\" title=\"目录管理命令-mkdir/rmdir\"></a>目录管理命令-mkdir/rmdir</h4><p>语法：<br>mkdir[参数] 目录名称<br>rmdir[参数] 目录名称</p>\n<p>功能：创建目录和删除目录。mkdir命令表示在当前目录中建立一个新目录，rmdir表示删除指定的目录。<br>-p表示递归删除或者创建目录。</p>\n<p>用法：<code>mkdir/rmdir -p 目录</code></p>\n<p>当前目录创建目录/删除目录</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# mkdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  test1\n[root@TheAnswer test]# rmdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>递归创建/删除目录</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# mkdir -p test1/test2/test3\n[root@TheAnswer test]# cd test1/test2/test3\n[root@TheAnswer test3]# pwd\n/root/test/test1/test2/test3\n[root@TheAnswer test]# rmdir -p test1/test2/test3\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"删除文件工具-rm\"><a href=\"#删除文件工具-rm\" class=\"headerlink\" title=\"删除文件工具-rm\"></a>删除文件工具-rm</h4><p>语法：<br>rm[参数] file1 file2 ……<br>rm[参数] dir1 dir2 dir ……</p>\n<p>功能：rm用来删除一个或多个文件的工具。并且可以用于删除非空目录。<br>也可以使用参数<code>-rf</code>强制删除一个非空目录。</p>\n<p>参数：<br><code>-f</code> 表示不显示警告或提示直接删除。<br><code>-i</code> 表示删除文件时显示警告信息并提示是否删除。<br><code>-r</code>或<code>-R</code>表示可以递归删除整个目录包括子目录及目录下的所有文件。</p>\n<p>用法：<code>rm -i file</code></p>\n<p>删除文件</p>\n<p>先用<code>touch b.txt </code>创建一个文件</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# touch b.txt\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  b.txt\n[root@TheAnswer test]# rm -i b.txt\nrm：是否删除普通空文件 \"b.txt\"？y\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用法：<code>rm -ir dir</code></p>\n<p>删除目录及所有下级目录和文件</p>\n<p>先用<code>touch b.txt </code>创建一个文件</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# rmdir a\nrmdir: 删除 \"a\" 失败: 目录非空\n[root@TheAnswer test]# rm -ir a\nrm：是否进入目录\"a\"? y\nrm：是否进入目录\"a/b\"? y\nrm：是否进入目录\"a/b/c\"? y\nrm：是否进入目录\"a/b/c/d\"? y\nrm：是否进入目录\"a/b/c/d/e\"? y\nrm：是否删除普通空文件 \"a/b/c/d/e/e.txt\"？y\nrm：是否删除目录 \"a/b/c/d/e\"？y\nrm：是否删除目录 \"a/b/c/d\"？y\nrm：是否删除目录 \"a/b/c\"？y\nrm：是否删除目录 \"a/b\"？y\nrm：是否删除目录 \"a\"？y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用法：<code>rm -rf dir</code></p>\n<p>不需要提示删除目录及所有下级目录和文件</p>\n<h4 id=\"文件名修改命令-mv\"><a href=\"#文件名修改命令-mv\" class=\"headerlink\" title=\"文件名修改命令-mv\"></a>文件名修改命令-mv</h4><p>语法：<br>mv 原文件名或目录名新文件名或目录名</p>\n<p>功能：文件更名或搬移。</p>\n<p>用法：<code>mv filename1 filename2</code></p>\n<p>将名称为filename1的文件改名为filename2并删除原文件。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@TheAnswer test]# ls\na123  a.txt  bcd\n[root@TheAnswer test]# mv a.txt abcd.txt\n[root@TheAnswer test]# ls\na123  abcd.txt  bcd\n[root@TheAnswer test]#<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用法：<code>mv filename1 path/filename2</code></p>\n<p>将名称为filename1的文件移动到path路径下并改名为filename2并删除原文件。</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  a.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv a.txt abcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv abcd.txt bcd/bcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# cd bcd\n[root@izbp14yziiuvu2qh2n015xz bcd]# ls\nbcd.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h2><h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><table>\n<thead>\n<tr>\n<th align=\"center\">-eq</th>\n<th align=\"center\">-ne</th>\n<th align=\"center\">-gt</th>\n<th align=\"center\">-lt</th>\n<th align=\"center\">ge</th>\n<th align=\"center\">le</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">等于</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">大于等于</td>\n<td align=\"center\">小于等于</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数语法\"><a href=\"#函数语法\" class=\"headerlink\" title=\"函数语法\"></a>函数语法</h4><p><code>[function] name(){函数体}[重定向]</code><br>其中function关键字和重定向是可选的</p>\n<h4 id=\"函数使用\"><a href=\"#函数使用\" class=\"headerlink\" title=\"函数使用\"></a>函数使用</h4><p><code>name 参数列表</code></p>\n<h4 id=\"写一个max函数返回3个参数中的最大值\"><a href=\"#写一个max函数返回3个参数中的最大值\" class=\"headerlink\" title=\"写一个max函数返回3个参数中的最大值\"></a>写一个max函数返回3个参数中的最大值</h4><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ max -lt $2 ];then\nmax=$2\nfi\nif [ max -lt $3 ];then\nmax=$3\nfi\nreturn max\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行上面程序报错</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">./max.sh: 第 11 行:[: max: 期待整数表达式\n./max.sh: 第 14 行:[: max: 期待整数表达式\n./max.sh: 第 17 行:return: max: 需要数字参数\nthe max number of 1 2 3 is : 255<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可能是max 有歧义 用 ${max} 或者 $max 代替max成功了</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ ${max} -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 3\necho \"the max number of 1 2 3 is : $?\"\nexit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">the max number of 1 2 3 is : 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id><a href=\"#\" class=\"headerlink\" title=\"$?\"></a>$?</h3><h4 id=\"获取上一个命令的退出状态\"><a href=\"#获取上一个命令的退出状态\" class=\"headerlink\" title=\"获取上一个命令的退出状态\"></a>获取上一个命令的退出状态</h4><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 4\necho \"the max number is : $?\"\nexit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>max.sh中max方法传进去4个参数，这个时候会退出脚本且状态为1</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[root@izbp14yziiuvu2qh2n015xz test]# echo $?\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"获取函数的返回值\"><a href=\"#获取函数的返回值\" class=\"headerlink\" title=\"获取函数的返回值\"></a>获取函数的返回值</h4><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho \"usage:max p1 p2 p3\"\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 \necho \"the max number is : $?\"\nexit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>结果</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">the max number is : 28<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把最大值得参数改为255</p>\n<p>结果</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">the max number is : 255<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>把最大值得参数改为256</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">the max number is : 0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个是后$？获取值是0</p>\n<p>$?获取的返回值是0~255之前，超过255开始从0计算 也就是说 256 输出 0，257输出1，258输出2</p>\n<p>怎么获取返回值？</p>\n<p>用全局变量来获取</p>\n<p><code>$max</code></p>\n<p>注：在 Shell 函数中定义的变量默认也是全局变量，它和在函数外部定义变量拥有一样的效果</p>\n<p><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>不渴望能够一跃千里，只希望每天能够前进一步。</em></p>\n<h2 id=\"操作系统简史\"><a href=\"#操作系统简史\" class=\"headerlink\" title=\"操作系统简史\"></a>操作系统简史</h2><p>四个时代<br>第一个时代是OS时代，这个时候操作系统才刚刚成型，最早是1973年由贝尔实验室开发的UNIX系统，以及1982年与1991年在UNIX系统基础上进行扩展定制的若干变种。<br>第二个时代是PC时代，PC时代崛起于1975年，当年乔布斯开发了Apple系统，随后1980年，比尔盖茨开发了DOS系统，从这时起更多的人开始接触操作系统，个人计算机得以普及。<br>第三个时代是GUI时代，GUI时代的代表作是1979年乔布斯开发的Mac系统与1990年比尔盖茨开发的Windows系统，以及1994年的Linux系统，这三个系统影响了整个时代，一直到现在仍被广泛使用。<br>第四个时代是移动OS时代，随着移动互联网的发展，移动OS也变得越来越重要，在移动OS时代，最知名的是Google的Android系统，以及乔布斯的iOS系统。</p>\n<h2 id=\"Shell是什么\"><a href=\"#Shell是什么\" class=\"headerlink\" title=\"Shell是什么\"></a>Shell是什么</h2><p><img src=\"Linux.png\" alt=\"Linux\"><br>Shell是用户与内核交互操作的接口，它接收用户的命令然后传递给内核，内核执行命令并将执行结果通过Shell返回给用户。<br>Shell既是一种命令解释器，也是一种编程语言。Shell有很多种版本，主要的版本如下：<br>Bourne Shell，源于UNIX早期版本的Shell。<br>Bash，又名Bourne Again Shell，来自GUN项目，它是Linux主要的Shell。<br>Korn Shell，它是对Bourne Shell的发展。<br>C shell，是SUN公司Shell的BSD版本。</p>\n<h2 id=\"Bash是什么\"><a href=\"#Bash是什么\" class=\"headerlink\" title=\"Bash是什么\"></a>Bash是什么</h2><p>Bash是Shell的一种，在Linux中常用的Shell就是Bourne-Again shell（简称bash）。<br>Bash有很灵活和强大的编程接口，同时又有很友好的用户界面。</p>\n<p><strong>Bash的特点：</strong> </p>\n<p><strong>•命令历史、命令补全</strong><br><strong>•管道、重定向</strong><br><strong>•命令别名</strong><br><strong>•命令行编辑</strong><br><strong>•命令行展开</strong><br><strong>•文件名通配</strong><br><strong>•变量</strong><br><strong>•编程</strong></p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"文件系统管理命令\"><a href=\"#文件系统管理命令\" class=\"headerlink\" title=\"文件系统管理命令\"></a>文件系统管理命令</h3><p>对文件及目录的管理操作包括新建、浏览、编辑、修改、删除等。</p>\n<h4 id=\"ls命令\"><a href=\"#ls命令\" class=\"headerlink\" title=\"ls命令\"></a>ls命令</h4><p>ls命令：显示文件信息命令</p>\n<p>功能：ls命令显示关于文件的信息，其中的文件包括任何类型的文件和目录。</p>\n<p>用法1：<code>ls</code></p>\n<pre><code>[root@TheAnswer test]# ls\na  a.txt</code></pre><p>test文件夹下使用ls命令可以看到有一个a文件夹和一个a.txt文件</p>\n<p>用法2：<code>ls -l</code><br>该命令显示文件或者目录下的文件的详细信息，包括文件类型及权限、连接数、文件所有者及所有者所属的组、文件大小、访问日期、时间、名称。</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# ls -l\n总用量 8\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\n-rw-r--r-- 1 root root   14 2月  11 20:43 a.txt</code></pre>\n<p>小提示：每一列的含义<br><img src=\"lsjieshitu.png\" alt=\"Linux\"></p>\n<p><strong>”标号1“：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">-</th>\n<th align=\"center\">d</th>\n<th align=\"center\">p</th>\n<th align=\"center\">l</th>\n<th align=\"center\">b</th>\n<th align=\"center\">c</th>\n<th align=\"center\">s</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">普通文件</td>\n<td align=\"center\">目录文件</td>\n<td align=\"center\">管理文件</td>\n<td align=\"center\">链接文件</td>\n<td align=\"center\">块设备文件</td>\n<td align=\"center\">字符设备文件</td>\n<td align=\"center\">套接字文件</td>\n</tr>\n</tbody></table>\n<p><strong>”标号2“：</strong>所有者/所有者权限</p>\n<p><strong>”标号3“：</strong>组用户权限（一个组中除所有者拥有的权限）</p>\n<p><strong>”标号4“：</strong>其他用户权限（除当前所有者的组，其他组的权限）</p>\n<p><strong>文件权限</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">r</th>\n<th align=\"center\">w</th>\n<th align=\"center\">x</th>\n<th align=\"center\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">读权限</td>\n<td align=\"center\">写权限</td>\n<td align=\"center\">可执行权限</td>\n<td align=\"center\">无权限</td>\n</tr>\n</tbody></table>\n<p><strong>”标号5“：</strong>如果是普通文件则为连接数,如果是目录文件则为第一级子目录数</p>\n<p><strong>”标号6“：</strong>用户名</p>\n<p><strong>”标号7“：</strong>组名</p>\n<p><strong>”标号8“：</strong>表示文件大小，单位为字节</p>\n<p><strong>”标号9“：</strong>表示最后修改时间</p>\n<p><strong>”标号10“：</strong>文件名</p>\n<p><strong>”标号11“：</strong>文件后缀</p>\n<p>用法3：<code>ls -l [文件包含的字符]*</code></p>\n<p>test目录下文件如下 a，a123，a.txt，bcd，下面使用ls -l a* 这个命令。</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# ls -l\n总用量 16\ndrwxr-xr-x 3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 a123\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x 2 root root 4096 2月  11 18:05 bcd</code></pre>\n<p>ls -l a* 该命令是显示当前目录下以a开头的文件或目录的详细信息。*是文件名称的匹配符，表示可以匹配任意字符串。</p>\n<pre><code>[root@TheAnswer test]# ls -l a*\n-rw-r--r-- 1 root root   14 2月  11 17:43 a.txt\n\na:\n总用量 4\ndrwxr-xr-x 3 root root 4096 2月  11 20:39 b\n\na123:\n总用量 0</code></pre><p>用法4：<code>ls -a 、ls -al</code><br>ls -a 会把隐藏文件显示出来，如果要想看到文件的信息的话就可以使用 ls -al。</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# ls -a\n.  ..  a  a123  .abc.txt  a.txt  bcd\n\n[root@TheAnswer test]# ls -al\n总用量 24\ndrwxr-xr-x  5 root root 4096 2月  11 18:31 .\ndr-xr-x---. 8 root root 4096 2月  11 17:12 ..\ndrwxr-xr-x  3 root root 4096 2月  11 20:36 a\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 a123\n-rw-r--r--  1 root root    0 2月  11 18:31 .abc.txt\n-rw-r--r--  1 root root   14 2月  11 17:43 a.txt\ndrwxr-xr-x  2 root root 4096 2月  11 18:05 bcd</code></pre>\n<h4 id=\"pwd命令\"><a href=\"#pwd命令\" class=\"headerlink\" title=\"pwd命令\"></a>pwd命令</h4><p>pwd命令：显示用户当前工作目录，</p>\n<p>功能：显示当前目录在文件系统层次中的位置。</p>\n<p>用法：<code>pwd</code></p>\n<p>先进入到一个工作目录下</p>\n<pre><code class=\"sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#</code></pre>\n<p>然后输入pwd</p>\n<pre><code class=\"sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#</code></pre>\n<pre><code class=\"sh\">[root@TheAnswer a]# pwd\n/root/test/a</code></pre>\n<h4 id=\"目录管理命令-mkdir-rmdir\"><a href=\"#目录管理命令-mkdir-rmdir\" class=\"headerlink\" title=\"目录管理命令-mkdir/rmdir\"></a>目录管理命令-mkdir/rmdir</h4><p>语法：<br>mkdir[参数] 目录名称<br>rmdir[参数] 目录名称</p>\n<p>功能：创建目录和删除目录。mkdir命令表示在当前目录中建立一个新目录，rmdir表示删除指定的目录。<br>-p表示递归删除或者创建目录。</p>\n<p>用法：<code>mkdir/rmdir -p 目录</code></p>\n<p>当前目录创建目录/删除目录</p>\n<pre><code class=\"sh\">[root@TheAnswer ~]# cd test/a\n[root@TheAnswer a]#\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# mkdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  test1\n[root@TheAnswer test]# rmdir test1\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd</code></pre>\n<p>递归创建/删除目录</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# mkdir -p test1/test2/test3\n[root@TheAnswer test]# cd test1/test2/test3\n[root@TheAnswer test3]# pwd\n/root/test/test1/test2/test3\n[root@TheAnswer test]# rmdir -p test1/test2/test3\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd</code></pre>\n<h4 id=\"删除文件工具-rm\"><a href=\"#删除文件工具-rm\" class=\"headerlink\" title=\"删除文件工具-rm\"></a>删除文件工具-rm</h4><p>语法：<br>rm[参数] file1 file2 ……<br>rm[参数] dir1 dir2 dir ……</p>\n<p>功能：rm用来删除一个或多个文件的工具。并且可以用于删除非空目录。<br>也可以使用参数<code>-rf</code>强制删除一个非空目录。</p>\n<p>参数：<br><code>-f</code> 表示不显示警告或提示直接删除。<br><code>-i</code> 表示删除文件时显示警告信息并提示是否删除。<br><code>-r</code>或<code>-R</code>表示可以递归删除整个目录包括子目录及目录下的所有文件。</p>\n<p>用法：<code>rm -i file</code></p>\n<p>删除文件</p>\n<p>先用<code>touch b.txt </code>创建一个文件</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# touch b.txt\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd  b.txt\n[root@TheAnswer test]# rm -i b.txt\nrm：是否删除普通空文件 &quot;b.txt&quot;？y\n[root@TheAnswer test]# ls\na  a123  a.txt  bcd</code></pre>\n<p>用法：<code>rm -ir dir</code></p>\n<p>删除目录及所有下级目录和文件</p>\n<p>先用<code>touch b.txt </code>创建一个文件</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# ls\na  a123  a.txt  bcd\n[root@TheAnswer test]# rmdir a\nrmdir: 删除 &quot;a&quot; 失败: 目录非空\n[root@TheAnswer test]# rm -ir a\nrm：是否进入目录&quot;a&quot;? y\nrm：是否进入目录&quot;a/b&quot;? y\nrm：是否进入目录&quot;a/b/c&quot;? y\nrm：是否进入目录&quot;a/b/c/d&quot;? y\nrm：是否进入目录&quot;a/b/c/d/e&quot;? y\nrm：是否删除普通空文件 &quot;a/b/c/d/e/e.txt&quot;？y\nrm：是否删除目录 &quot;a/b/c/d/e&quot;？y\nrm：是否删除目录 &quot;a/b/c/d&quot;？y\nrm：是否删除目录 &quot;a/b/c&quot;？y\nrm：是否删除目录 &quot;a/b&quot;？y\nrm：是否删除目录 &quot;a&quot;？y</code></pre>\n<p>用法：<code>rm -rf dir</code></p>\n<p>不需要提示删除目录及所有下级目录和文件</p>\n<h4 id=\"文件名修改命令-mv\"><a href=\"#文件名修改命令-mv\" class=\"headerlink\" title=\"文件名修改命令-mv\"></a>文件名修改命令-mv</h4><p>语法：<br>mv 原文件名或目录名新文件名或目录名</p>\n<p>功能：文件更名或搬移。</p>\n<p>用法：<code>mv filename1 filename2</code></p>\n<p>将名称为filename1的文件改名为filename2并删除原文件。</p>\n<pre><code class=\"sh\">[root@TheAnswer test]# ls\na123  a.txt  bcd\n[root@TheAnswer test]# mv a.txt abcd.txt\n[root@TheAnswer test]# ls\na123  abcd.txt  bcd\n[root@TheAnswer test]#</code></pre>\n<p>用法：<code>mv filename1 path/filename2</code></p>\n<p>将名称为filename1的文件移动到path路径下并改名为filename2并删除原文件。</p>\n<pre><code class=\"sh\">[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  a.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv a.txt abcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  abcd.txt  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# mv abcd.txt bcd/bcd.txt\n[root@izbp14yziiuvu2qh2n015xz test]# ls\na123  bcd\n[root@izbp14yziiuvu2qh2n015xz test]# cd bcd\n[root@izbp14yziiuvu2qh2n015xz bcd]# ls\nbcd.txt</code></pre>\n<h2 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h2><h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><table>\n<thead>\n<tr>\n<th align=\"center\">-eq</th>\n<th align=\"center\">-ne</th>\n<th align=\"center\">-gt</th>\n<th align=\"center\">-lt</th>\n<th align=\"center\">ge</th>\n<th align=\"center\">le</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">等于</td>\n<td align=\"center\">不等于</td>\n<td align=\"center\">大于</td>\n<td align=\"center\">小于</td>\n<td align=\"center\">大于等于</td>\n<td align=\"center\">小于等于</td>\n</tr>\n</tbody></table>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><h4 id=\"函数语法\"><a href=\"#函数语法\" class=\"headerlink\" title=\"函数语法\"></a>函数语法</h4><p><code>[function] name(){函数体}[重定向]</code><br>其中function关键字和重定向是可选的</p>\n<h4 id=\"函数使用\"><a href=\"#函数使用\" class=\"headerlink\" title=\"函数使用\"></a>函数使用</h4><p><code>name 参数列表</code></p>\n<h4 id=\"写一个max函数返回3个参数中的最大值\"><a href=\"#写一个max函数返回3个参数中的最大值\" class=\"headerlink\" title=\"写一个max函数返回3个参数中的最大值\"></a>写一个max函数返回3个参数中的最大值</h4><pre><code class=\"sh\">#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho &quot;usage:max p1 p2 p3&quot;\nexit 1\nfi\nmax=$1\nif [ max -lt $2 ];then\nmax=$2\nfi\nif [ max -lt $3 ];then\nmax=$3\nfi\nreturn max\n}\nmax 1 2 3\necho &quot;the max number of 1 2 3 is : $?&quot;\nexit\n</code></pre>\n<p>执行上面程序报错</p>\n<pre><code class=\"sh\">./max.sh: 第 11 行:[: max: 期待整数表达式\n./max.sh: 第 14 行:[: max: 期待整数表达式\n./max.sh: 第 17 行:return: max: 需要数字参数\nthe max number of 1 2 3 is : 255</code></pre>\n<p>可能是max 有歧义 用 ${max} 或者 $max 代替max成功了</p>\n<pre><code class=\"sh\">#!/bin/bash\n\nfunction max( )\n{\necho $# $1 $2 $3\nif [ $# -ne 3 ];then\necho &quot;usage:max p1 p2 p3&quot;\nexit 1\nfi\nmax=$1\nif [ ${max} -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 3\necho &quot;the max number of 1 2 3 is : $?&quot;\nexit</code></pre>\n<p>结果</p>\n<pre><code class=\"sh\">the max number of 1 2 3 is : 3</code></pre>\n<h3 id><a href=\"#\" class=\"headerlink\" title=\"$?\"></a>$?</h3><h4 id=\"获取上一个命令的退出状态\"><a href=\"#获取上一个命令的退出状态\" class=\"headerlink\" title=\"获取上一个命令的退出状态\"></a>获取上一个命令的退出状态</h4><pre><code class=\"sh\">#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho &quot;usage:max p1 p2 p3&quot;\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 4\necho &quot;the max number is : $?&quot;\nexit</code></pre>\n<p>max.sh中max方法传进去4个参数，这个时候会退出脚本且状态为1</p>\n<pre><code class=\"sh\">[root@izbp14yziiuvu2qh2n015xz test]# echo $?\n1</code></pre>\n<h4 id=\"获取函数的返回值\"><a href=\"#获取函数的返回值\" class=\"headerlink\" title=\"获取函数的返回值\"></a>获取函数的返回值</h4><pre><code class=\"sh\">#!/bin/bash\n\nfunction max( )\n{\nif [ $# -ne 3 ];then\necho &quot;usage:max p1 p2 p3&quot;\nexit 1\nfi\nmax=$1\nif [ $max -lt $2 ];then\nmax=$2\nfi\nif [ ${max} -lt $3 ];then\nmax=$3\nfi\nreturn ${max}\n}\nmax 1 2 28 \necho &quot;the max number is : $?&quot;\nexit</code></pre>\n<p>结果</p>\n<pre><code class=\"sh\">the max number is : 28</code></pre>\n<p>把最大值得参数改为255</p>\n<p>结果</p>\n<pre><code class=\"sh\">the max number is : 255</code></pre>\n<p>把最大值得参数改为256</p>\n<pre><code class=\"sh\">the max number is : 0</code></pre>\n<p>这个是后$？获取值是0</p>\n<p>$?获取的返回值是0~255之前，超过255开始从0计算 也就是说 256 输出 0，257输出1，258输出2</p>\n<p>怎么获取返回值？</p>\n<p>用全局变量来获取</p>\n<p><code>$max</code></p>\n<p>注：在 Shell 函数中定义的变量默认也是全局变量，它和在函数外部定义变量拥有一样的效果</p>\n<p><strong>百度一下</strong><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></p>\n"},{"title":"pytest接口自动化框架搭建","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-13T13:13:30.000Z","password":null,"summary":"pytest & 接口自动化","_content":"\n## 前言\n*眼泪不是我们的答案。拼搏才是我们的选择*\n\n## 环境\nJava环境 java version \"1.8.0_271\"\nPython环境 3.7.9\n\n\n## 什么是自动化框架\n作用：\n1、提高测试效率，减低维护成本\n2、减少人工干预，提高测试准确性，增加代码重用性\n3、核心思想是让不懂代码的人也能够通过这个框架去实现自动化\n\n## Pytest特性\n1、比较灵活的单元测试框架  \n2、pytest可以和selenium、request、appiium结合实现web自动化、接口自动化、app自动化  \n3、pytest可以实现测试用例的跳过以及reruns失败用例重试  \n4、pytest可以和allure生成美观的测试报告  \n5、pytest可以和jenkins持续集成  \n6、pytest有很多非常强大的插件。并且这些插件能够实现很多实用的操作\n\n#### Pytest单元测试框架与自动化测试框架的关系\n1、单元测试框架只是自动化测试框架的组成部分之一  \n2、pom设计模式只是自动化测试框架中的组成部分  \n3、数据驱动  \n4、关键字驱动  \n5、全局配置文件封装  \n6、日志监控  \n7、selenium，requests 二次封装  \n8、断言  \n9、报告邮件  \n\n\n\n## 常用插件\n1、pytest：单元测试框架  \n2、pytest-html：生成HTML格式的报告  \n3、pytest-xdist：测试用例分布式执行，多CPU分发  \n4、pytest-ordering：用于改变测试用例的执行顺序  \n5、pytest-rerunfailfures：用例失败重跑  \n6、allure-pytest：用于生成美观的测试报告  \n\n##### 常用插件批量安装\n步骤1、新建.txt文件  \n步骤2、把插件名放入文件中  \n步骤3、通过pip install -r 文件.txt完成安装  \n步骤4、验证是否安装成功 使用命令pytest --version  \n\n##### allure测试报告安装\n1、下载、解压  \n下载地址：https://github.com/allure-framework/allure2/  releases  \n2、配置环境变量  \n在系统环境变量后追加解压路径 例如：E:\\allure-2.13.7\\bin  \n3、验证是否安装成功：  \n分别在dos和pycharm中验证    \n```sh\nallure --version\n```\n***注意：dos可以验证成功但是pycharm验证失败需重启pycharm***\n\n#### jpype测试报告安装\n*概述：JPype 是一个能够让 python 代码方便地调用 Java 代码的工具*\n1、下载whl包JPype1-1.1.2-cp37-cp37m-win32.whl  \n下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/  \n2、安装jpype  \n1)命令行进入whl包所在目录  \n2)执行安装命令  \n```sh\npython -m pip install JPype1-1.1.2-cp37-cp37m-win32.whl\n```\n\n## 框架搭建\n\n### 框架结构图\n![目录结构](jiagoutu.png)\n\n\n### pytest.ini配置文件\n1、文件位置：一般放在根目录  \n2、文件编码：必须是ANSI，可以使用记事本修改编码格式  \n3、文件作用：改变pytest默认行为  \n4、不管是主函数的模式运行、命令行模式运行，都会去读取这个配置文件  \n5、配置文件\n```sh\n[pytest]\n#命令行的参数，用空格分隔\n#addopts=-vs -k mingchen --alluredir ./temps --clean-alluredir\n# addopts=-vs ./testcase/test_rqu_mingchenapi.py --alluredir ./temps --clean-alluredir\naddopts=-vs ./testcase/test_api.py::TestApi::test_openapi_mingchen --alluredir ./temps --clean-alluredir\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n\tsmoke3:冒烟用例3\n\n\n# 命令行窗口日志输出配置\n# log_cli 可以输入0, False 代码不输出日志， 1、True 代表开启日志输出\n# log_cli_level 代表日志输出级别\n# log_cli_date_format 日期格式\n# log_cli_format 日志模板格式\n\nlog_cli=1\nlog_cli_level=info\nlog_cli_date_format=%Y-%m-%d-%H-%M-%S\nlog_cli_format=%(asctime)s-%(filename)s-%(module)s-%(funcName)s-%(lineno)d-%(levelname)s-%(message)s\n\n\n#  日志输出到文件配置\n#  log_file 日志文件\n#  log_file_level 代表日志输出级别\n#  log_file_date_format 日期格式\n#  log_file_format 日志模板格式\n\nlog_file=log/test.log\nlog_file_level=debug\nlog_file_date_format=%Y-%m-%d %H:%M:%S\nlog_file_format=%(asctime)s %(filename)s %(module)s %(funcName)s %(lineno)d %(levelname)s: %(message)s\n\n```\n\n### 默认用例规则\n模块名必须以test_开头或者_test结尾  \n测试类必须以Test开头，并且不能有init方法  \n测试方法必须以test开头  \n以上规则可以在pytest.ini进行配置\n\n```sh\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n```\n### 测试用例运行方式\n#### 主函数模式\n```sh\n#运行所有用例\npytest.main()\n```\n```sh\n#指定模块运行\npytest.main(['-vs','test_modul1.py'])\n```\n```sh\n#指定目录运行\npytest.main(['-vs','./list_testcase'])\n```\n通过nodeid指定运行用例：nodeid由模块名，分隔符，类名，方法名，函数名组成\n```sh\n#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::函数名'])\n```\n```sh\n#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::类名::方法名'])\n```\n\n#### 命令行模式\n1、运行所有用例\n```sh\npytest\n```\n1、指定模块运行\n```sh\npytest -vs test_modul.py\n```\n1、指定目录运行\n```sh\npytest -vs ./list_testcase\n```\n1、指定函数运行\n```sh\npytest -vs ./list_testcase/文件名::函数名\n```\n***小插曲：pytest命令参数***  \n***-s：表示输出调试信息***  \n***-v：显示更详细的信息***  \n***-vs：两个参数一起用***  \n***-n：支持多线程或者分布式运行测试用例***  \n```sh\n#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2\n```\n***--reruns NUM：失败用例重跑***  \n***-x：表示只要有一个用例报错，那么测试停止***  \n***--maxfail=2：比那时出现两个失败用例就停止***  \n***-k：根据测试用例的部分字符串来指定执行测试用例***  \n```sh\n#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2\n```\n***--html ./report/report.html：在指定目录下生成报告***  \n\n#### 通过读取pytest.ini配置文件执行\n```sh\n#pytest.ini配置文件执行用例\naddopts=-vs ./testcase/test_api.py::TestApi::test_case_api\n```\n\n\n### 创建一个通过配置文件执行的测试用例demo\n\n1、创建一个文件名为api_automation  \n2、在api_automation目录下创建testcase文件夹  \n3、在testcase下创建test_demo.py\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n4、在api_automation目录下创建pytest.ini配置文件(注意编码格式)\n```sh\n#命令行的参数，用空格分隔\naddopts=-vs ./testcase/test_demo.py::TestDemoClass::test_01_case1 \n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n``` \n5、在api_automation下创建run.py主函数\n```sh\nimport os\nimport time\nimport pytest\n\nif __name__=='__main__':\n\tpytest.main()\n\ttime.sleep(2)\n    #生成报告\n\t# os.system('allure generate ./temps -o ./report --clean')\n```\n\n6、运行run.py\n\n```sh\n[运行信息]\n======================================================= test session starts =======================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 1 item\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n======================================================== 1 passed in 0.11s ======================================================== \n```\n\n#### 测试用例执行顺序\npytest默认从上到下\nunitest以ascii的大小决定执行顺序\n##### pytest 改变默认执行顺序\n使用mark标记\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t@pytest.mark.run(roder=1)\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n#### pytest 分组执行\npytest进行分组测试的方法是使用装饰器 @pytest.mark.标记名称，被标记为相同名称的用例可以看做为同一个组。  \n分组执行可应用与冒烟用例执行、分模块执行、分接口和web执行。\n\n##### 分组执行-冒烟用例\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n``` \n\n完成配置后执行run.py即可\n\n```sh\n[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 53 deselected / 1 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n================================================================================== 1 passed, 53 deselected in 2.61s =================================================================================== \n```\n\n##### 同一个用例标记多个组\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\t@pytest.mark.smoke2\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n``` \n\n##### 分组执行支持逻辑运算符\n1、or连接多个标记名称会执行包含这些标记的用例  \n2、and 连接多个标记名称会执行多个标记均存在的用例  \n3、not 连接多个标记名称会执行非这个标记的用例  \n\n以or连接举例：  \n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t@pytest.mark.smoke2\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m \"smoke1 or smoke2\"\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n``` \n\n\n```sh\n[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 52 deselected / 2 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\ntestcase/test_demo.py::TestDemoClass::test_02_case2\n测试用例2\nPASSED\n\n================================================================================== 2 passed, 52 deselected in 2.54s ===================================================================================\n```\n\n#### 测试用例跳过\n\n##### 有条件跳过\n```sh\n@pytest.mark.skipif(条件参数>=条件,reason=\"原因\")\n```\n\n##### 无条件跳过\n```sh\n@pytest.mark.skip(reason=\"原因\")\n```\n\n#### Pytest 前后置处理(固件、夹具)\n\n\n##### setup/teardown，setup_class/teardown_class\n```sh\nclass TestDemo:\n\t#这个在所用用例之前执行一次\n\tdef setup_class(self):\n\t\tprint('\\n在每个类执行之前的初始化操作：例如：创建日志对象、创建数据库连接、创建接口的请求对象')\n\t#在每个用例之前执行一次\n\tdef setup(self):\n\t\tprint('\\n在执行测试用之前初始化的代码：打开浏览器、加载网页')\n\tdef test_01(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02(self):\n\t\tprint('\\n测试用例2')\n\tdef teardown(self):\n\t\tprint('\\n在执行测试用例之后的扫尾的代码：关闭浏览器')\n\tdef teardown_class(self):\n\t\tprint('\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象')\n```\n\n##### 使用pytest.fixture()装饰器来实现部分用例的前后置\n```sh\n@pytest.fixture(scope=\"\",param=\"\",autouse=\"\",ids=\"\",name=\"\")\n```\n\n\n(1)scope表示的是被@pytest.fixture标记的方法的作用域，默认为function，还有class、module、package/session  \n(2)param：参数化（支持列表[]、元祖()、字典列表[{},{},{}]、字典元祖([],[],[])）  \nprint('\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象')  \n(3)autouse=True：自动使用默False  \n(4)ids：当使用param参数化时，给每个值设置一个变量名，意义不大  \n(5)name：表示的是给被@pytest.fixture标记的方法取一个别名，当取了别名之后原来的名称就用不了  \n***return和yield都是返回的意思但是return后面不能有代码，yield后面可以有代码*** \n\n```sh\nimport pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],ids=['a','b','c'])\ndef my_fixture(request):\n\tprint('前置')\n\tyield request.param\n\tprint('后置')\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self,my_fixture):\n\t\tprint('\\n测试用例2')\n\t\tprint('------'+str(my_fixture))\n```\n\n```sh\nimport pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],name='aaa')\ndef my_fixture(request):\n\treturn request.param\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self,aaa):\n\t\tprint('\\n测试用例2')\n\t\tprint('------'+str(aaa))\n\n```\n\n#### 断言\nassert","source":"_posts/pytest.md","raw":"---\ntitle: pytest接口自动化框架搭建\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-13 21:13:30\npassword:\nsummary: pytest & 接口自动化\ntags:\n- python\n- 自动化\n- pytest\ncategories:\n- pytest\n---\n\n## 前言\n*眼泪不是我们的答案。拼搏才是我们的选择*\n\n## 环境\nJava环境 java version \"1.8.0_271\"\nPython环境 3.7.9\n\n\n## 什么是自动化框架\n作用：\n1、提高测试效率，减低维护成本\n2、减少人工干预，提高测试准确性，增加代码重用性\n3、核心思想是让不懂代码的人也能够通过这个框架去实现自动化\n\n## Pytest特性\n1、比较灵活的单元测试框架  \n2、pytest可以和selenium、request、appiium结合实现web自动化、接口自动化、app自动化  \n3、pytest可以实现测试用例的跳过以及reruns失败用例重试  \n4、pytest可以和allure生成美观的测试报告  \n5、pytest可以和jenkins持续集成  \n6、pytest有很多非常强大的插件。并且这些插件能够实现很多实用的操作\n\n#### Pytest单元测试框架与自动化测试框架的关系\n1、单元测试框架只是自动化测试框架的组成部分之一  \n2、pom设计模式只是自动化测试框架中的组成部分  \n3、数据驱动  \n4、关键字驱动  \n5、全局配置文件封装  \n6、日志监控  \n7、selenium，requests 二次封装  \n8、断言  \n9、报告邮件  \n\n\n\n## 常用插件\n1、pytest：单元测试框架  \n2、pytest-html：生成HTML格式的报告  \n3、pytest-xdist：测试用例分布式执行，多CPU分发  \n4、pytest-ordering：用于改变测试用例的执行顺序  \n5、pytest-rerunfailfures：用例失败重跑  \n6、allure-pytest：用于生成美观的测试报告  \n\n##### 常用插件批量安装\n步骤1、新建.txt文件  \n步骤2、把插件名放入文件中  \n步骤3、通过pip install -r 文件.txt完成安装  \n步骤4、验证是否安装成功 使用命令pytest --version  \n\n##### allure测试报告安装\n1、下载、解压  \n下载地址：https://github.com/allure-framework/allure2/  releases  \n2、配置环境变量  \n在系统环境变量后追加解压路径 例如：E:\\allure-2.13.7\\bin  \n3、验证是否安装成功：  \n分别在dos和pycharm中验证    \n```sh\nallure --version\n```\n***注意：dos可以验证成功但是pycharm验证失败需重启pycharm***\n\n#### jpype测试报告安装\n*概述：JPype 是一个能够让 python 代码方便地调用 Java 代码的工具*\n1、下载whl包JPype1-1.1.2-cp37-cp37m-win32.whl  \n下载地址：https://www.lfd.uci.edu/~gohlke/pythonlibs/  \n2、安装jpype  \n1)命令行进入whl包所在目录  \n2)执行安装命令  \n```sh\npython -m pip install JPype1-1.1.2-cp37-cp37m-win32.whl\n```\n\n## 框架搭建\n\n### 框架结构图\n![目录结构](jiagoutu.png)\n\n\n### pytest.ini配置文件\n1、文件位置：一般放在根目录  \n2、文件编码：必须是ANSI，可以使用记事本修改编码格式  \n3、文件作用：改变pytest默认行为  \n4、不管是主函数的模式运行、命令行模式运行，都会去读取这个配置文件  \n5、配置文件\n```sh\n[pytest]\n#命令行的参数，用空格分隔\n#addopts=-vs -k mingchen --alluredir ./temps --clean-alluredir\n# addopts=-vs ./testcase/test_rqu_mingchenapi.py --alluredir ./temps --clean-alluredir\naddopts=-vs ./testcase/test_api.py::TestApi::test_openapi_mingchen --alluredir ./temps --clean-alluredir\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n\tsmoke3:冒烟用例3\n\n\n# 命令行窗口日志输出配置\n# log_cli 可以输入0, False 代码不输出日志， 1、True 代表开启日志输出\n# log_cli_level 代表日志输出级别\n# log_cli_date_format 日期格式\n# log_cli_format 日志模板格式\n\nlog_cli=1\nlog_cli_level=info\nlog_cli_date_format=%Y-%m-%d-%H-%M-%S\nlog_cli_format=%(asctime)s-%(filename)s-%(module)s-%(funcName)s-%(lineno)d-%(levelname)s-%(message)s\n\n\n#  日志输出到文件配置\n#  log_file 日志文件\n#  log_file_level 代表日志输出级别\n#  log_file_date_format 日期格式\n#  log_file_format 日志模板格式\n\nlog_file=log/test.log\nlog_file_level=debug\nlog_file_date_format=%Y-%m-%d %H:%M:%S\nlog_file_format=%(asctime)s %(filename)s %(module)s %(funcName)s %(lineno)d %(levelname)s: %(message)s\n\n```\n\n### 默认用例规则\n模块名必须以test_开头或者_test结尾  \n测试类必须以Test开头，并且不能有init方法  \n测试方法必须以test开头  \n以上规则可以在pytest.ini进行配置\n\n```sh\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n```\n### 测试用例运行方式\n#### 主函数模式\n```sh\n#运行所有用例\npytest.main()\n```\n```sh\n#指定模块运行\npytest.main(['-vs','test_modul1.py'])\n```\n```sh\n#指定目录运行\npytest.main(['-vs','./list_testcase'])\n```\n通过nodeid指定运行用例：nodeid由模块名，分隔符，类名，方法名，函数名组成\n```sh\n#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::函数名'])\n```\n```sh\n#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::类名::方法名'])\n```\n\n#### 命令行模式\n1、运行所有用例\n```sh\npytest\n```\n1、指定模块运行\n```sh\npytest -vs test_modul.py\n```\n1、指定目录运行\n```sh\npytest -vs ./list_testcase\n```\n1、指定函数运行\n```sh\npytest -vs ./list_testcase/文件名::函数名\n```\n***小插曲：pytest命令参数***  \n***-s：表示输出调试信息***  \n***-v：显示更详细的信息***  \n***-vs：两个参数一起用***  \n***-n：支持多线程或者分布式运行测试用例***  \n```sh\n#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2\n```\n***--reruns NUM：失败用例重跑***  \n***-x：表示只要有一个用例报错，那么测试停止***  \n***--maxfail=2：比那时出现两个失败用例就停止***  \n***-k：根据测试用例的部分字符串来指定执行测试用例***  \n```sh\n#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2\n```\n***--html ./report/report.html：在指定目录下生成报告***  \n\n#### 通过读取pytest.ini配置文件执行\n```sh\n#pytest.ini配置文件执行用例\naddopts=-vs ./testcase/test_api.py::TestApi::test_case_api\n```\n\n\n### 创建一个通过配置文件执行的测试用例demo\n\n1、创建一个文件名为api_automation  \n2、在api_automation目录下创建testcase文件夹  \n3、在testcase下创建test_demo.py\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n4、在api_automation目录下创建pytest.ini配置文件(注意编码格式)\n```sh\n#命令行的参数，用空格分隔\naddopts=-vs ./testcase/test_demo.py::TestDemoClass::test_01_case1 \n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n``` \n5、在api_automation下创建run.py主函数\n```sh\nimport os\nimport time\nimport pytest\n\nif __name__=='__main__':\n\tpytest.main()\n\ttime.sleep(2)\n    #生成报告\n\t# os.system('allure generate ./temps -o ./report --clean')\n```\n\n6、运行run.py\n\n```sh\n[运行信息]\n======================================================= test session starts =======================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 1 item\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n======================================================== 1 passed in 0.11s ======================================================== \n```\n\n#### 测试用例执行顺序\npytest默认从上到下\nunitest以ascii的大小决定执行顺序\n##### pytest 改变默认执行顺序\n使用mark标记\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t@pytest.mark.run(roder=1)\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n#### pytest 分组执行\npytest进行分组测试的方法是使用装饰器 @pytest.mark.标记名称，被标记为相同名称的用例可以看做为同一个组。  \n分组执行可应用与冒烟用例执行、分模块执行、分接口和web执行。\n\n##### 分组执行-冒烟用例\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n``` \n\n完成配置后执行run.py即可\n\n```sh\n[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 53 deselected / 1 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n================================================================================== 1 passed, 53 deselected in 2.61s =================================================================================== \n```\n\n##### 同一个用例标记多个组\n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\t@pytest.mark.smoke2\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n``` \n\n##### 分组执行支持逻辑运算符\n1、or连接多个标记名称会执行包含这些标记的用例  \n2、and 连接多个标记名称会执行多个标记均存在的用例  \n3、not 连接多个标记名称会执行非这个标记的用例  \n\n以or连接举例：  \n```sh\n[testcase/test_demo.py]\nclass TestDemoClass:\n\t@pytest.mark.smoke1\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\t@pytest.mark.smoke2\n\tdef test_02_case2(self):\n\t\tprint('\\n测试用例2')\n```\n\n```sh\n[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m \"smoke1 or smoke2\"\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n\tsmoke1:冒烟用例1\n\tsmoke2:冒烟用例2\n``` \n\n\n```sh\n[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 52 deselected / 2 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\ntestcase/test_demo.py::TestDemoClass::test_02_case2\n测试用例2\nPASSED\n\n================================================================================== 2 passed, 52 deselected in 2.54s ===================================================================================\n```\n\n#### 测试用例跳过\n\n##### 有条件跳过\n```sh\n@pytest.mark.skipif(条件参数>=条件,reason=\"原因\")\n```\n\n##### 无条件跳过\n```sh\n@pytest.mark.skip(reason=\"原因\")\n```\n\n#### Pytest 前后置处理(固件、夹具)\n\n\n##### setup/teardown，setup_class/teardown_class\n```sh\nclass TestDemo:\n\t#这个在所用用例之前执行一次\n\tdef setup_class(self):\n\t\tprint('\\n在每个类执行之前的初始化操作：例如：创建日志对象、创建数据库连接、创建接口的请求对象')\n\t#在每个用例之前执行一次\n\tdef setup(self):\n\t\tprint('\\n在执行测试用之前初始化的代码：打开浏览器、加载网页')\n\tdef test_01(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02(self):\n\t\tprint('\\n测试用例2')\n\tdef teardown(self):\n\t\tprint('\\n在执行测试用例之后的扫尾的代码：关闭浏览器')\n\tdef teardown_class(self):\n\t\tprint('\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象')\n```\n\n##### 使用pytest.fixture()装饰器来实现部分用例的前后置\n```sh\n@pytest.fixture(scope=\"\",param=\"\",autouse=\"\",ids=\"\",name=\"\")\n```\n\n\n(1)scope表示的是被@pytest.fixture标记的方法的作用域，默认为function，还有class、module、package/session  \n(2)param：参数化（支持列表[]、元祖()、字典列表[{},{},{}]、字典元祖([],[],[])）  \nprint('\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象')  \n(3)autouse=True：自动使用默False  \n(4)ids：当使用param参数化时，给每个值设置一个变量名，意义不大  \n(5)name：表示的是给被@pytest.fixture标记的方法取一个别名，当取了别名之后原来的名称就用不了  \n***return和yield都是返回的意思但是return后面不能有代码，yield后面可以有代码*** \n\n```sh\nimport pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],ids=['a','b','c'])\ndef my_fixture(request):\n\tprint('前置')\n\tyield request.param\n\tprint('后置')\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self,my_fixture):\n\t\tprint('\\n测试用例2')\n\t\tprint('------'+str(my_fixture))\n```\n\n```sh\nimport pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],name='aaa')\ndef my_fixture(request):\n\treturn request.param\nclass TestDemoClass:\n\tdef test_01_case1(self):\n\t\tprint('\\n测试用例1')\n\tdef test_02_case2(self,aaa):\n\t\tprint('\\n测试用例2')\n\t\tprint('------'+str(aaa))\n\n```\n\n#### 断言\nassert","slug":"pytest","published":1,"updated":"2022-07-22T05:49:03.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl74e3apm0016rcpg3dlj7afq","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>眼泪不是我们的答案。拼搏才是我们的选择</em></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Java环境 java version “1.8.0_271”<br>Python环境 3.7.9</p>\n<h2 id=\"什么是自动化框架\"><a href=\"#什么是自动化框架\" class=\"headerlink\" title=\"什么是自动化框架\"></a>什么是自动化框架</h2><p>作用：<br>1、提高测试效率，减低维护成本<br>2、减少人工干预，提高测试准确性，增加代码重用性<br>3、核心思想是让不懂代码的人也能够通过这个框架去实现自动化</p>\n<h2 id=\"Pytest特性\"><a href=\"#Pytest特性\" class=\"headerlink\" title=\"Pytest特性\"></a>Pytest特性</h2><p>1、比较灵活的单元测试框架<br>2、pytest可以和selenium、request、appiium结合实现web自动化、接口自动化、app自动化<br>3、pytest可以实现测试用例的跳过以及reruns失败用例重试<br>4、pytest可以和allure生成美观的测试报告<br>5、pytest可以和jenkins持续集成<br>6、pytest有很多非常强大的插件。并且这些插件能够实现很多实用的操作</p>\n<h4 id=\"Pytest单元测试框架与自动化测试框架的关系\"><a href=\"#Pytest单元测试框架与自动化测试框架的关系\" class=\"headerlink\" title=\"Pytest单元测试框架与自动化测试框架的关系\"></a>Pytest单元测试框架与自动化测试框架的关系</h4><p>1、单元测试框架只是自动化测试框架的组成部分之一<br>2、pom设计模式只是自动化测试框架中的组成部分<br>3、数据驱动<br>4、关键字驱动<br>5、全局配置文件封装<br>6、日志监控<br>7、selenium，requests 二次封装<br>8、断言<br>9、报告邮件  </p>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><p>1、pytest：单元测试框架<br>2、pytest-html：生成HTML格式的报告<br>3、pytest-xdist：测试用例分布式执行，多CPU分发<br>4、pytest-ordering：用于改变测试用例的执行顺序<br>5、pytest-rerunfailfures：用例失败重跑<br>6、allure-pytest：用于生成美观的测试报告  </p>\n<h5 id=\"常用插件批量安装\"><a href=\"#常用插件批量安装\" class=\"headerlink\" title=\"常用插件批量安装\"></a>常用插件批量安装</h5><p>步骤1、新建.txt文件<br>步骤2、把插件名放入文件中<br>步骤3、通过pip install -r 文件.txt完成安装<br>步骤4、验证是否安装成功 使用命令pytest –version  </p>\n<h5 id=\"allure测试报告安装\"><a href=\"#allure测试报告安装\" class=\"headerlink\" title=\"allure测试报告安装\"></a>allure测试报告安装</h5><p>1、下载、解压<br>下载地址：<a href=\"https://github.com/allure-framework/allure2/\" target=\"_blank\" rel=\"noopener\">https://github.com/allure-framework/allure2/</a>  releases<br>2、配置环境变量<br>在系统环境变量后追加解压路径 例如：E:\\allure-2.13.7\\bin<br>3、验证是否安装成功：<br>分别在dos和pycharm中验证    </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">allure --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong><em>注意：dos可以验证成功但是pycharm验证失败需重启pycharm</em></strong></p>\n<h4 id=\"jpype测试报告安装\"><a href=\"#jpype测试报告安装\" class=\"headerlink\" title=\"jpype测试报告安装\"></a>jpype测试报告安装</h4><p><em>概述：JPype 是一个能够让 python 代码方便地调用 Java 代码的工具</em><br>1、下载whl包JPype1-1.1.2-cp37-cp37m-win32.whl<br>下载地址：<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"noopener\">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a><br>2、安装jpype<br>1)命令行进入whl包所在目录<br>2)执行安装命令  </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">python -m pip install JPype1-1.1.2-cp37-cp37m-win32.whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"框架搭建\"><a href=\"#框架搭建\" class=\"headerlink\" title=\"框架搭建\"></a>框架搭建</h2><h3 id=\"框架结构图\"><a href=\"#框架结构图\" class=\"headerlink\" title=\"框架结构图\"></a>框架结构图</h3><p><img src=\"jiagoutu.png\" alt=\"目录结构\"></p>\n<h3 id=\"pytest-ini配置文件\"><a href=\"#pytest-ini配置文件\" class=\"headerlink\" title=\"pytest.ini配置文件\"></a>pytest.ini配置文件</h3><p>1、文件位置：一般放在根目录<br>2、文件编码：必须是ANSI，可以使用记事本修改编码格式<br>3、文件作用：改变pytest默认行为<br>4、不管是主函数的模式运行、命令行模式运行，都会去读取这个配置文件<br>5、配置文件</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[pytest]\n#命令行的参数，用空格分隔\n#addopts=-vs -k mingchen --alluredir ./temps --clean-alluredir\n# addopts=-vs ./testcase/test_rqu_mingchenapi.py --alluredir ./temps --clean-alluredir\naddopts=-vs ./testcase/test_api.py::TestApi::test_openapi_mingchen --alluredir ./temps --clean-alluredir\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2\n    smoke3:冒烟用例3\n\n\n# 命令行窗口日志输出配置\n# log_cli 可以输入0, False 代码不输出日志， 1、True 代表开启日志输出\n# log_cli_level 代表日志输出级别\n# log_cli_date_format 日期格式\n# log_cli_format 日志模板格式\n\nlog_cli=1\nlog_cli_level=info\nlog_cli_date_format=%Y-%m-%d-%H-%M-%S\nlog_cli_format=%(asctime)s-%(filename)s-%(module)s-%(funcName)s-%(lineno)d-%(levelname)s-%(message)s\n\n\n#  日志输出到文件配置\n#  log_file 日志文件\n#  log_file_level 代表日志输出级别\n#  log_file_date_format 日期格式\n#  log_file_format 日志模板格式\n\nlog_file=log/test.log\nlog_file_level=debug\nlog_file_date_format=%Y-%m-%d %H:%M:%S\nlog_file_format=%(asctime)s %(filename)s %(module)s %(funcName)s %(lineno)d %(levelname)s: %(message)s\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"默认用例规则\"><a href=\"#默认用例规则\" class=\"headerlink\" title=\"默认用例规则\"></a>默认用例规则</h3><p>模块名必须以test_开头或者_test结尾<br>测试类必须以Test开头，并且不能有init方法<br>测试方法必须以test开头<br>以上规则可以在pytest.ini进行配置</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"测试用例运行方式\"><a href=\"#测试用例运行方式\" class=\"headerlink\" title=\"测试用例运行方式\"></a>测试用例运行方式</h3><h4 id=\"主函数模式\"><a href=\"#主函数模式\" class=\"headerlink\" title=\"主函数模式\"></a>主函数模式</h4><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#运行所有用例\npytest.main()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#指定模块运行\npytest.main(['-vs','test_modul1.py'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#指定目录运行\npytest.main(['-vs','./list_testcase'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>通过nodeid指定运行用例：nodeid由模块名，分隔符，类名，方法名，函数名组成</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::函数名'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#通过nodeid指定运行用例\npytest.main(['-vs','./模块名/文件名::类名::方法名'])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h4><p>1、运行所有用例</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">pytest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>1、指定模块运行</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">pytest -vs test_modul.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>1、指定目录运行</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">pytest -vs ./list_testcase<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>1、指定函数运行</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">pytest -vs ./list_testcase/文件名::函数名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong><em>小插曲：pytest命令参数</em></strong><br><strong><em>-s：表示输出调试信息</em></strong><br><strong><em>-v：显示更详细的信息</em></strong><br><strong><em>-vs：两个参数一起用</em></strong><br><strong><em>-n：支持多线程或者分布式运行测试用例</em></strong>  </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong><em>–reruns NUM：失败用例重跑</em></strong><br><strong><em>-x：表示只要有一个用例报错，那么测试停止</em></strong><br><strong><em>–maxfail=2：比那时出现两个失败用例就停止</em></strong><br><strong><em>-k：根据测试用例的部分字符串来指定执行测试用例</em></strong>  </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong><em>–html ./report/report.html：在指定目录下生成报告</em></strong>  </p>\n<h4 id=\"通过读取pytest-ini配置文件执行\"><a href=\"#通过读取pytest-ini配置文件执行\" class=\"headerlink\" title=\"通过读取pytest.ini配置文件执行\"></a>通过读取pytest.ini配置文件执行</h4><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#pytest.ini配置文件执行用例\naddopts=-vs ./testcase/test_api.py::TestApi::test_case_api<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"创建一个通过配置文件执行的测试用例demo\"><a href=\"#创建一个通过配置文件执行的测试用例demo\" class=\"headerlink\" title=\"创建一个通过配置文件执行的测试用例demo\"></a>创建一个通过配置文件执行的测试用例demo</h3><p>1、创建一个文件名为api_automation<br>2、在api_automation目录下创建testcase文件夹<br>3、在testcase下创建test_demo.py</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    def test_01_case1(self):\n        print('\\n测试用例1')\n    def test_02_case2(self):\n        print('\\n测试用例2')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>4、在api_automation目录下创建pytest.ini配置文件(注意编码格式)</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">#命令行的参数，用空格分隔\naddopts=-vs ./testcase/test_demo.py::TestDemoClass::test_01_case1 \n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>5、在api_automation下创建run.py主函数</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">import os\nimport time\nimport pytest\n\nif __name__=='__main__':\n    pytest.main()\n    time.sleep(2)\n    #生成报告\n    # os.system('allure generate ./temps -o ./report --clean')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6、运行run.py</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[运行信息]\n======================================================= test session starts =======================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 1 item\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n======================================================== 1 passed in 0.11s ======================================================== <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"测试用例执行顺序\"><a href=\"#测试用例执行顺序\" class=\"headerlink\" title=\"测试用例执行顺序\"></a>测试用例执行顺序</h4><p>pytest默认从上到下<br>unitest以ascii的大小决定执行顺序</p>\n<h5 id=\"pytest-改变默认执行顺序\"><a href=\"#pytest-改变默认执行顺序\" class=\"headerlink\" title=\"pytest 改变默认执行顺序\"></a>pytest 改变默认执行顺序</h5><p>使用mark标记</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    def test_01_case1(self):\n        print('\\n测试用例1')\n    @pytest.mark.run(roder=1)\n    def test_02_case2(self):\n        print('\\n测试用例2')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"pytest-分组执行\"><a href=\"#pytest-分组执行\" class=\"headerlink\" title=\"pytest 分组执行\"></a>pytest 分组执行</h4><p>pytest进行分组测试的方法是使用装饰器 @pytest.mark.标记名称，被标记为相同名称的用例可以看做为同一个组。<br>分组执行可应用与冒烟用例执行、分模块执行、分接口和web执行。</p>\n<h5 id=\"分组执行-冒烟用例\"><a href=\"#分组执行-冒烟用例\" class=\"headerlink\" title=\"分组执行-冒烟用例\"></a>分组执行-冒烟用例</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    def test_01_case1(self):\n        print('\\n测试用例1')\n\n    def test_02_case2(self):\n        print('\\n测试用例2')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完成配置后执行run.py即可</p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 53 deselected / 1 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n================================================================================== 1 passed, 53 deselected in 2.61s =================================================================================== <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"同一个用例标记多个组\"><a href=\"#同一个用例标记多个组\" class=\"headerlink\" title=\"同一个用例标记多个组\"></a>同一个用例标记多个组</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    @pytest.mark.smoke2\n    def test_01_case1(self):\n        print('\\n测试用例1')\n\n    def test_02_case2(self):\n        print('\\n测试用例2')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"分组执行支持逻辑运算符\"><a href=\"#分组执行支持逻辑运算符\" class=\"headerlink\" title=\"分组执行支持逻辑运算符\"></a>分组执行支持逻辑运算符</h5><p>1、or连接多个标记名称会执行包含这些标记的用例<br>2、and 连接多个标记名称会执行多个标记均存在的用例<br>3、not 连接多个标记名称会执行非这个标记的用例  </p>\n<p>以or连接举例：  </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    def test_01_case1(self):\n        print('\\n测试用例1')\n    @pytest.mark.smoke2\n    def test_02_case2(self):\n        print('\\n测试用例2')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m \"smoke1 or smoke2\"\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.7.9', 'Platform': 'Windows-10-10.0.19041-SP0', 'Packages': {'pytest': '6.2.4', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'allure-pytest': '2.9.45', 'forked': '1.4.0', 'html': '3.1.1', 'metadata': '2.0.1', 'ordering': '0.6', 'rerunfailures': '10.2', 'xdist': '2.5.0'}, 'JAVA_HOME': 'D:\\\\java\\\\jdk1.8'}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 52 deselected / 2 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\ntestcase/test_demo.py::TestDemoClass::test_02_case2\n测试用例2\nPASSED\n\n================================================================================== 2 passed, 52 deselected in 2.54s ===================================================================================<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"测试用例跳过\"><a href=\"#测试用例跳过\" class=\"headerlink\" title=\"测试用例跳过\"></a>测试用例跳过</h4><h5 id=\"有条件跳过\"><a href=\"#有条件跳过\" class=\"headerlink\" title=\"有条件跳过\"></a>有条件跳过</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">@pytest.mark.skipif(条件参数>=条件,reason=\"原因\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"无条件跳过\"><a href=\"#无条件跳过\" class=\"headerlink\" title=\"无条件跳过\"></a>无条件跳过</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">@pytest.mark.skip(reason=\"原因\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Pytest-前后置处理-固件、夹具\"><a href=\"#Pytest-前后置处理-固件、夹具\" class=\"headerlink\" title=\"Pytest 前后置处理(固件、夹具)\"></a>Pytest 前后置处理(固件、夹具)</h4><h5 id=\"setup-teardown，setup-class-teardown-class\"><a href=\"#setup-teardown，setup-class-teardown-class\" class=\"headerlink\" title=\"setup/teardown，setup_class/teardown_class\"></a>setup/teardown，setup_class/teardown_class</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">class TestDemo:\n    #这个在所用用例之前执行一次\n    def setup_class(self):\n        print('\\n在每个类执行之前的初始化操作：例如：创建日志对象、创建数据库连接、创建接口的请求对象')\n    #在每个用例之前执行一次\n    def setup(self):\n        print('\\n在执行测试用之前初始化的代码：打开浏览器、加载网页')\n    def test_01(self):\n        print('\\n测试用例1')\n    def test_02(self):\n        print('\\n测试用例2')\n    def teardown(self):\n        print('\\n在执行测试用例之后的扫尾的代码：关闭浏览器')\n    def teardown_class(self):\n        print('\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"使用pytest-fixture-装饰器来实现部分用例的前后置\"><a href=\"#使用pytest-fixture-装饰器来实现部分用例的前后置\" class=\"headerlink\" title=\"使用pytest.fixture()装饰器来实现部分用例的前后置\"></a>使用pytest.fixture()装饰器来实现部分用例的前后置</h5><pre class=\"line-numbers language-sh\"><code class=\"language-sh\">@pytest.fixture(scope=\"\",param=\"\",autouse=\"\",ids=\"\",name=\"\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>(1)scope表示的是被@pytest.fixture标记的方法的作用域，默认为function，还有class、module、package/session<br>(2)param：参数化（支持列表[]、元祖()、字典列表[{},{},{}]、字典元祖([],[],[])）<br>print(‘\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象’)<br>(3)autouse=True：自动使用默False<br>(4)ids：当使用param参数化时，给每个值设置一个变量名，意义不大<br>(5)name：表示的是给被@pytest.fixture标记的方法取一个别名，当取了别名之后原来的名称就用不了<br><strong><em>return和yield都是返回的意思但是return后面不能有代码，yield后面可以有代码</em></strong> </p>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">import pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],ids=['a','b','c'])\ndef my_fixture(request):\n    print('前置')\n    yield request.param\n    print('后置')\nclass TestDemoClass:\n    def test_01_case1(self):\n        print('\\n测试用例1')\n    def test_02_case2(self,my_fixture):\n        print('\\n测试用例2')\n        print('------'+str(my_fixture))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-sh\"><code class=\"language-sh\">import pytest\n@pytest.fixture(scope=\"function\",param=['1','2','3'],name='aaa')\ndef my_fixture(request):\n    return request.param\nclass TestDemoClass:\n    def test_01_case1(self):\n        print('\\n测试用例1')\n    def test_02_case2(self,aaa):\n        print('\\n测试用例2')\n        print('------'+str(aaa))\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><p>assert</p>\n","site":{"data":{"friends":[{"name":"TheAnswer","url":"https://angelotheanswer.github.io/","title":"访问主页","introduction":"安全小卫士","avatar":"https://angelotheanswer.github.io/medias/avatars/avatar.jpg"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><em>眼泪不是我们的答案。拼搏才是我们的选择</em></p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>Java环境 java version “1.8.0_271”<br>Python环境 3.7.9</p>\n<h2 id=\"什么是自动化框架\"><a href=\"#什么是自动化框架\" class=\"headerlink\" title=\"什么是自动化框架\"></a>什么是自动化框架</h2><p>作用：<br>1、提高测试效率，减低维护成本<br>2、减少人工干预，提高测试准确性，增加代码重用性<br>3、核心思想是让不懂代码的人也能够通过这个框架去实现自动化</p>\n<h2 id=\"Pytest特性\"><a href=\"#Pytest特性\" class=\"headerlink\" title=\"Pytest特性\"></a>Pytest特性</h2><p>1、比较灵活的单元测试框架<br>2、pytest可以和selenium、request、appiium结合实现web自动化、接口自动化、app自动化<br>3、pytest可以实现测试用例的跳过以及reruns失败用例重试<br>4、pytest可以和allure生成美观的测试报告<br>5、pytest可以和jenkins持续集成<br>6、pytest有很多非常强大的插件。并且这些插件能够实现很多实用的操作</p>\n<h4 id=\"Pytest单元测试框架与自动化测试框架的关系\"><a href=\"#Pytest单元测试框架与自动化测试框架的关系\" class=\"headerlink\" title=\"Pytest单元测试框架与自动化测试框架的关系\"></a>Pytest单元测试框架与自动化测试框架的关系</h4><p>1、单元测试框架只是自动化测试框架的组成部分之一<br>2、pom设计模式只是自动化测试框架中的组成部分<br>3、数据驱动<br>4、关键字驱动<br>5、全局配置文件封装<br>6、日志监控<br>7、selenium，requests 二次封装<br>8、断言<br>9、报告邮件  </p>\n<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><p>1、pytest：单元测试框架<br>2、pytest-html：生成HTML格式的报告<br>3、pytest-xdist：测试用例分布式执行，多CPU分发<br>4、pytest-ordering：用于改变测试用例的执行顺序<br>5、pytest-rerunfailfures：用例失败重跑<br>6、allure-pytest：用于生成美观的测试报告  </p>\n<h5 id=\"常用插件批量安装\"><a href=\"#常用插件批量安装\" class=\"headerlink\" title=\"常用插件批量安装\"></a>常用插件批量安装</h5><p>步骤1、新建.txt文件<br>步骤2、把插件名放入文件中<br>步骤3、通过pip install -r 文件.txt完成安装<br>步骤4、验证是否安装成功 使用命令pytest –version  </p>\n<h5 id=\"allure测试报告安装\"><a href=\"#allure测试报告安装\" class=\"headerlink\" title=\"allure测试报告安装\"></a>allure测试报告安装</h5><p>1、下载、解压<br>下载地址：<a href=\"https://github.com/allure-framework/allure2/\" target=\"_blank\" rel=\"noopener\">https://github.com/allure-framework/allure2/</a>  releases<br>2、配置环境变量<br>在系统环境变量后追加解压路径 例如：E:\\allure-2.13.7\\bin<br>3、验证是否安装成功：<br>分别在dos和pycharm中验证    </p>\n<pre><code class=\"sh\">allure --version</code></pre>\n<p><strong><em>注意：dos可以验证成功但是pycharm验证失败需重启pycharm</em></strong></p>\n<h4 id=\"jpype测试报告安装\"><a href=\"#jpype测试报告安装\" class=\"headerlink\" title=\"jpype测试报告安装\"></a>jpype测试报告安装</h4><p><em>概述：JPype 是一个能够让 python 代码方便地调用 Java 代码的工具</em><br>1、下载whl包JPype1-1.1.2-cp37-cp37m-win32.whl<br>下载地址：<a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"noopener\">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a><br>2、安装jpype<br>1)命令行进入whl包所在目录<br>2)执行安装命令  </p>\n<pre><code class=\"sh\">python -m pip install JPype1-1.1.2-cp37-cp37m-win32.whl</code></pre>\n<h2 id=\"框架搭建\"><a href=\"#框架搭建\" class=\"headerlink\" title=\"框架搭建\"></a>框架搭建</h2><h3 id=\"框架结构图\"><a href=\"#框架结构图\" class=\"headerlink\" title=\"框架结构图\"></a>框架结构图</h3><p><img src=\"jiagoutu.png\" alt=\"目录结构\"></p>\n<h3 id=\"pytest-ini配置文件\"><a href=\"#pytest-ini配置文件\" class=\"headerlink\" title=\"pytest.ini配置文件\"></a>pytest.ini配置文件</h3><p>1、文件位置：一般放在根目录<br>2、文件编码：必须是ANSI，可以使用记事本修改编码格式<br>3、文件作用：改变pytest默认行为<br>4、不管是主函数的模式运行、命令行模式运行，都会去读取这个配置文件<br>5、配置文件</p>\n<pre><code class=\"sh\">[pytest]\n#命令行的参数，用空格分隔\n#addopts=-vs -k mingchen --alluredir ./temps --clean-alluredir\n# addopts=-vs ./testcase/test_rqu_mingchenapi.py --alluredir ./temps --clean-alluredir\naddopts=-vs ./testcase/test_api.py::TestApi::test_openapi_mingchen --alluredir ./temps --clean-alluredir\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2\n    smoke3:冒烟用例3\n\n\n# 命令行窗口日志输出配置\n# log_cli 可以输入0, False 代码不输出日志， 1、True 代表开启日志输出\n# log_cli_level 代表日志输出级别\n# log_cli_date_format 日期格式\n# log_cli_format 日志模板格式\n\nlog_cli=1\nlog_cli_level=info\nlog_cli_date_format=%Y-%m-%d-%H-%M-%S\nlog_cli_format=%(asctime)s-%(filename)s-%(module)s-%(funcName)s-%(lineno)d-%(levelname)s-%(message)s\n\n\n#  日志输出到文件配置\n#  log_file 日志文件\n#  log_file_level 代表日志输出级别\n#  log_file_date_format 日期格式\n#  log_file_format 日志模板格式\n\nlog_file=log/test.log\nlog_file_level=debug\nlog_file_date_format=%Y-%m-%d %H:%M:%S\nlog_file_format=%(asctime)s %(filename)s %(module)s %(funcName)s %(lineno)d %(levelname)s: %(message)s\n</code></pre>\n<h3 id=\"默认用例规则\"><a href=\"#默认用例规则\" class=\"headerlink\" title=\"默认用例规则\"></a>默认用例规则</h3><p>模块名必须以test_开头或者_test结尾<br>测试类必须以Test开头，并且不能有init方法<br>测试方法必须以test开头<br>以上规则可以在pytest.ini进行配置</p>\n<pre><code class=\"sh\">#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test</code></pre>\n<h3 id=\"测试用例运行方式\"><a href=\"#测试用例运行方式\" class=\"headerlink\" title=\"测试用例运行方式\"></a>测试用例运行方式</h3><h4 id=\"主函数模式\"><a href=\"#主函数模式\" class=\"headerlink\" title=\"主函数模式\"></a>主函数模式</h4><pre><code class=\"sh\">#运行所有用例\npytest.main()</code></pre>\n<pre><code class=\"sh\">#指定模块运行\npytest.main([&#39;-vs&#39;,&#39;test_modul1.py&#39;])</code></pre>\n<pre><code class=\"sh\">#指定目录运行\npytest.main([&#39;-vs&#39;,&#39;./list_testcase&#39;])</code></pre>\n<p>通过nodeid指定运行用例：nodeid由模块名，分隔符，类名，方法名，函数名组成</p>\n<pre><code class=\"sh\">#通过nodeid指定运行用例\npytest.main([&#39;-vs&#39;,&#39;./模块名/文件名::函数名&#39;])</code></pre>\n<pre><code class=\"sh\">#通过nodeid指定运行用例\npytest.main([&#39;-vs&#39;,&#39;./模块名/文件名::类名::方法名&#39;])</code></pre>\n<h4 id=\"命令行模式\"><a href=\"#命令行模式\" class=\"headerlink\" title=\"命令行模式\"></a>命令行模式</h4><p>1、运行所有用例</p>\n<pre><code class=\"sh\">pytest</code></pre>\n<p>1、指定模块运行</p>\n<pre><code class=\"sh\">pytest -vs test_modul.py</code></pre>\n<p>1、指定目录运行</p>\n<pre><code class=\"sh\">pytest -vs ./list_testcase</code></pre>\n<p>1、指定函数运行</p>\n<pre><code class=\"sh\">pytest -vs ./list_testcase/文件名::函数名</code></pre>\n<p><strong><em>小插曲：pytest命令参数</em></strong><br><strong><em>-s：表示输出调试信息</em></strong><br><strong><em>-v：显示更详细的信息</em></strong><br><strong><em>-vs：两个参数一起用</em></strong><br><strong><em>-n：支持多线程或者分布式运行测试用例</em></strong>  </p>\n<pre><code class=\"sh\">#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2</code></pre>\n<p><strong><em>–reruns NUM：失败用例重跑</em></strong><br><strong><em>-x：表示只要有一个用例报错，那么测试停止</em></strong><br><strong><em>–maxfail=2：比那时出现两个失败用例就停止</em></strong><br><strong><em>-k：根据测试用例的部分字符串来指定执行测试用例</em></strong>  </p>\n<pre><code class=\"sh\">#多线程分布式执行用例\npytest -vs ./list_testcase/testcase.py -n 2</code></pre>\n<p><strong><em>–html ./report/report.html：在指定目录下生成报告</em></strong>  </p>\n<h4 id=\"通过读取pytest-ini配置文件执行\"><a href=\"#通过读取pytest-ini配置文件执行\" class=\"headerlink\" title=\"通过读取pytest.ini配置文件执行\"></a>通过读取pytest.ini配置文件执行</h4><pre><code class=\"sh\">#pytest.ini配置文件执行用例\naddopts=-vs ./testcase/test_api.py::TestApi::test_case_api</code></pre>\n<h3 id=\"创建一个通过配置文件执行的测试用例demo\"><a href=\"#创建一个通过配置文件执行的测试用例demo\" class=\"headerlink\" title=\"创建一个通过配置文件执行的测试用例demo\"></a>创建一个通过配置文件执行的测试用例demo</h3><p>1、创建一个文件名为api_automation<br>2、在api_automation目录下创建testcase文件夹<br>3、在testcase下创建test_demo.py</p>\n<pre><code class=\"sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n    def test_02_case2(self):\n        print(&#39;\\n测试用例2&#39;)</code></pre>\n<p>4、在api_automation目录下创建pytest.ini配置文件(注意编码格式)</p>\n<pre><code class=\"sh\">#命令行的参数，用空格分隔\naddopts=-vs ./testcase/test_demo.py::TestDemoClass::test_01_case1 \n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test</code></pre>\n<p>5、在api_automation下创建run.py主函数</p>\n<pre><code class=\"sh\">import os\nimport time\nimport pytest\n\nif __name__==&#39;__main__&#39;:\n    pytest.main()\n    time.sleep(2)\n    #生成报告\n    # os.system(&#39;allure generate ./temps -o ./report --clean&#39;)</code></pre>\n<p>6、运行run.py</p>\n<pre><code class=\"sh\">[运行信息]\n======================================================= test session starts =======================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {&#39;Python&#39;: &#39;3.7.9&#39;, &#39;Platform&#39;: &#39;Windows-10-10.0.19041-SP0&#39;, &#39;Packages&#39;: {&#39;pytest&#39;: &#39;6.2.4&#39;, &#39;py&#39;: &#39;1.10.0&#39;, &#39;pluggy&#39;: &#39;0.13.1&#39;}, &#39;Plugins&#39;: {&#39;allure-pytest&#39;: &#39;2.9.45&#39;, &#39;forked&#39;: &#39;1.4.0&#39;, &#39;html&#39;: &#39;3.1.1&#39;, &#39;metadata&#39;: &#39;2.0.1&#39;, &#39;ordering&#39;: &#39;0.6&#39;, &#39;rerunfailures&#39;: &#39;10.2&#39;, &#39;xdist&#39;: &#39;2.5.0&#39;}, &#39;JAVA_HOME&#39;: &#39;D:\\\\java\\\\jdk1.8&#39;}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 1 item\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n======================================================== 1 passed in 0.11s ======================================================== </code></pre>\n<h4 id=\"测试用例执行顺序\"><a href=\"#测试用例执行顺序\" class=\"headerlink\" title=\"测试用例执行顺序\"></a>测试用例执行顺序</h4><p>pytest默认从上到下<br>unitest以ascii的大小决定执行顺序</p>\n<h5 id=\"pytest-改变默认执行顺序\"><a href=\"#pytest-改变默认执行顺序\" class=\"headerlink\" title=\"pytest 改变默认执行顺序\"></a>pytest 改变默认执行顺序</h5><p>使用mark标记</p>\n<pre><code class=\"sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n    @pytest.mark.run(roder=1)\n    def test_02_case2(self):\n        print(&#39;\\n测试用例2&#39;)</code></pre>\n<h4 id=\"pytest-分组执行\"><a href=\"#pytest-分组执行\" class=\"headerlink\" title=\"pytest 分组执行\"></a>pytest 分组执行</h4><p>pytest进行分组测试的方法是使用装饰器 @pytest.mark.标记名称，被标记为相同名称的用例可以看做为同一个组。<br>分组执行可应用与冒烟用例执行、分模块执行、分接口和web执行。</p>\n<h5 id=\"分组执行-冒烟用例\"><a href=\"#分组执行-冒烟用例\" class=\"headerlink\" title=\"分组执行-冒烟用例\"></a>分组执行-冒烟用例</h5><pre><code class=\"sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n\n    def test_02_case2(self):\n        print(&#39;\\n测试用例2&#39;)</code></pre>\n<pre><code class=\"sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1</code></pre>\n<p>完成配置后执行run.py即可</p>\n<pre><code class=\"sh\">[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {&#39;Python&#39;: &#39;3.7.9&#39;, &#39;Platform&#39;: &#39;Windows-10-10.0.19041-SP0&#39;, &#39;Packages&#39;: {&#39;pytest&#39;: &#39;6.2.4&#39;, &#39;py&#39;: &#39;1.10.0&#39;, &#39;pluggy&#39;: &#39;0.13.1&#39;}, &#39;Plugins&#39;: {&#39;allure-pytest&#39;: &#39;2.9.45&#39;, &#39;forked&#39;: &#39;1.4.0&#39;, &#39;html&#39;: &#39;3.1.1&#39;, &#39;metadata&#39;: &#39;2.0.1&#39;, &#39;ordering&#39;: &#39;0.6&#39;, &#39;rerunfailures&#39;: &#39;10.2&#39;, &#39;xdist&#39;: &#39;2.5.0&#39;}, &#39;JAVA_HOME&#39;: &#39;D:\\\\java\\\\jdk1.8&#39;}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 53 deselected / 1 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\n\n================================================================================== 1 passed, 53 deselected in 2.61s =================================================================================== </code></pre>\n<h5 id=\"同一个用例标记多个组\"><a href=\"#同一个用例标记多个组\" class=\"headerlink\" title=\"同一个用例标记多个组\"></a>同一个用例标记多个组</h5><pre><code class=\"sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    @pytest.mark.smoke2\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n\n    def test_02_case2(self):\n        print(&#39;\\n测试用例2&#39;)</code></pre>\n<pre><code class=\"sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2</code></pre>\n<h5 id=\"分组执行支持逻辑运算符\"><a href=\"#分组执行支持逻辑运算符\" class=\"headerlink\" title=\"分组执行支持逻辑运算符\"></a>分组执行支持逻辑运算符</h5><p>1、or连接多个标记名称会执行包含这些标记的用例<br>2、and 连接多个标记名称会执行多个标记均存在的用例<br>3、not 连接多个标记名称会执行非这个标记的用例  </p>\n<p>以or连接举例：  </p>\n<pre><code class=\"sh\">[testcase/test_demo.py]\nclass TestDemoClass:\n    @pytest.mark.smoke1\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n    @pytest.mark.smoke2\n    def test_02_case2(self):\n        print(&#39;\\n测试用例2&#39;)</code></pre>\n<pre><code class=\"sh\">[pytest.ini]\n#命令行的参数，用空格分隔\naddopts=-vs -m &quot;smoke1 or smoke2&quot;\n#测试用例路径\ntestpaths=testcase\n#模块名的规则\npython_files=test_*.py\n#类名的规则\npython_classes=Test*\n#方法名的规则\npython_functions=test\n#标记测试用例\nmarkers=\n    smoke1:冒烟用例1\n    smoke2:冒烟用例2</code></pre>\n<pre><code class=\"sh\">[运行信息]\n========================================================================================= test session starts =========================================================================================\nplatform win32 -- Python 3.7.9, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- D:\\python\\python.exe\ncachedir: .pytest_cache\nmetadata: {&#39;Python&#39;: &#39;3.7.9&#39;, &#39;Platform&#39;: &#39;Windows-10-10.0.19041-SP0&#39;, &#39;Packages&#39;: {&#39;pytest&#39;: &#39;6.2.4&#39;, &#39;py&#39;: &#39;1.10.0&#39;, &#39;pluggy&#39;: &#39;0.13.1&#39;}, &#39;Plugins&#39;: {&#39;allure-pytest&#39;: &#39;2.9.45&#39;, &#39;forked&#39;: &#39;1.4.0&#39;, &#39;html&#39;: &#39;3.1.1&#39;, &#39;metadata&#39;: &#39;2.0.1&#39;, &#39;ordering&#39;: &#39;0.6&#39;, &#39;rerunfailures&#39;: &#39;10.2&#39;, &#39;xdist&#39;: &#39;2.5.0&#39;}, &#39;JAVA_HOME&#39;: &#39;D:\\\\java\\\\jdk1.8&#39;}\nrootdir: D:\\work\\repository\\project\\api_automation, configfile: pytest.ini, testpaths: testcase\nplugins: allure-pytest-2.9.45, forked-1.4.0, html-3.1.1, metadata-2.0.1, ordering-0.6, rerunfailures-10.2, xdist-2.5.0\ncollected 54 items / 52 deselected / 2 selected\n\ntestcase/test_demo.py::TestDemoClass::test_01_case1\n测试用例1\nPASSED\ntestcase/test_demo.py::TestDemoClass::test_02_case2\n测试用例2\nPASSED\n\n================================================================================== 2 passed, 52 deselected in 2.54s ===================================================================================</code></pre>\n<h4 id=\"测试用例跳过\"><a href=\"#测试用例跳过\" class=\"headerlink\" title=\"测试用例跳过\"></a>测试用例跳过</h4><h5 id=\"有条件跳过\"><a href=\"#有条件跳过\" class=\"headerlink\" title=\"有条件跳过\"></a>有条件跳过</h5><pre><code class=\"sh\">@pytest.mark.skipif(条件参数&gt;=条件,reason=&quot;原因&quot;)</code></pre>\n<h5 id=\"无条件跳过\"><a href=\"#无条件跳过\" class=\"headerlink\" title=\"无条件跳过\"></a>无条件跳过</h5><pre><code class=\"sh\">@pytest.mark.skip(reason=&quot;原因&quot;)</code></pre>\n<h4 id=\"Pytest-前后置处理-固件、夹具\"><a href=\"#Pytest-前后置处理-固件、夹具\" class=\"headerlink\" title=\"Pytest 前后置处理(固件、夹具)\"></a>Pytest 前后置处理(固件、夹具)</h4><h5 id=\"setup-teardown，setup-class-teardown-class\"><a href=\"#setup-teardown，setup-class-teardown-class\" class=\"headerlink\" title=\"setup/teardown，setup_class/teardown_class\"></a>setup/teardown，setup_class/teardown_class</h5><pre><code class=\"sh\">class TestDemo:\n    #这个在所用用例之前执行一次\n    def setup_class(self):\n        print(&#39;\\n在每个类执行之前的初始化操作：例如：创建日志对象、创建数据库连接、创建接口的请求对象&#39;)\n    #在每个用例之前执行一次\n    def setup(self):\n        print(&#39;\\n在执行测试用之前初始化的代码：打开浏览器、加载网页&#39;)\n    def test_01(self):\n        print(&#39;\\n测试用例1&#39;)\n    def test_02(self):\n        print(&#39;\\n测试用例2&#39;)\n    def teardown(self):\n        print(&#39;\\n在执行测试用例之后的扫尾的代码：关闭浏览器&#39;)\n    def teardown_class(self):\n        print(&#39;\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象&#39;)</code></pre>\n<h5 id=\"使用pytest-fixture-装饰器来实现部分用例的前后置\"><a href=\"#使用pytest-fixture-装饰器来实现部分用例的前后置\" class=\"headerlink\" title=\"使用pytest.fixture()装饰器来实现部分用例的前后置\"></a>使用pytest.fixture()装饰器来实现部分用例的前后置</h5><pre><code class=\"sh\">@pytest.fixture(scope=&quot;&quot;,param=&quot;&quot;,autouse=&quot;&quot;,ids=&quot;&quot;,name=&quot;&quot;)</code></pre>\n<p>(1)scope表示的是被@pytest.fixture标记的方法的作用域，默认为function，还有class、module、package/session<br>(2)param：参数化（支持列表[]、元祖()、字典列表[{},{},{}]、字典元祖([],[],[])）<br>print(‘\\n在每个类执行后的扫尾工作：比如：销毁日志对象、销毁数据库连接、销毁接口的请求对象’)<br>(3)autouse=True：自动使用默False<br>(4)ids：当使用param参数化时，给每个值设置一个变量名，意义不大<br>(5)name：表示的是给被@pytest.fixture标记的方法取一个别名，当取了别名之后原来的名称就用不了<br><strong><em>return和yield都是返回的意思但是return后面不能有代码，yield后面可以有代码</em></strong> </p>\n<pre><code class=\"sh\">import pytest\n@pytest.fixture(scope=&quot;function&quot;,param=[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],ids=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])\ndef my_fixture(request):\n    print(&#39;前置&#39;)\n    yield request.param\n    print(&#39;后置&#39;)\nclass TestDemoClass:\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n    def test_02_case2(self,my_fixture):\n        print(&#39;\\n测试用例2&#39;)\n        print(&#39;------&#39;+str(my_fixture))</code></pre>\n<pre><code class=\"sh\">import pytest\n@pytest.fixture(scope=&quot;function&quot;,param=[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;],name=&#39;aaa&#39;)\ndef my_fixture(request):\n    return request.param\nclass TestDemoClass:\n    def test_01_case1(self):\n        print(&#39;\\n测试用例1&#39;)\n    def test_02_case2(self,aaa):\n        print(&#39;\\n测试用例2&#39;)\n        print(&#39;------&#39;+str(aaa))\n</code></pre>\n<h4 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h4><p>assert</p>\n"}],"PostAsset":[{"_id":"source/_posts/article-Linux/Linux.png","slug":"Linux.png","post":"cl74e3anc0013rcpgkp1oa04y","modified":0,"renderable":0},{"_id":"source/_posts/article-Linux/lsjieshitu.png","slug":"lsjieshitu.png","post":"cl74e3anc0013rcpgkp1oa04y","modified":0,"renderable":0},{"_id":"source/_posts/article-Linux/shuoming.jpeg","slug":"shuoming.jpeg","post":"cl74e3anc0013rcpgkp1oa04y","modified":0,"renderable":0},{"_id":"source/_posts/pytest/jiagoutu.png","slug":"jiagoutu.png","post":"cl74e3apm0016rcpg3dlj7afq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl74e3am30001rcpgpbzbd8md","category_id":"cl74e3am80002rcpg1v6ttcq1","_id":"cl74e3ama0005rcpgtzz8cmlu"},{"post_id":"cl74e3amp000crcpgv3f5t0xc","category_id":"cl74e3amt000hrcpgnybuwoal","_id":"cl74e3amz000rrcpg943zup32"},{"post_id":"cl74e3amr000frcpg81idmhwe","category_id":"cl74e3amy000orcpgehg2rizh","_id":"cl74e3an0000vrcpgg4r6ncbm"},{"post_id":"cl74e3amt000ircpgnc9kguqq","category_id":"cl74e3an0000trcpgg2edrwun","_id":"cl74e3an1000zrcpg65z8vqwz"},{"post_id":"cl74e3amv000krcpg25fc5e9r","category_id":"cl74e3an0000xrcpgwj5jem9y","_id":"cl74e3an10011rcpg8e3lrjxy"},{"post_id":"cl74e3anc0013rcpgkp1oa04y","category_id":"cl74e3amy000orcpgehg2rizh","_id":"cl74e3and0015rcpg44letz0p"},{"post_id":"cl74e3apm0016rcpg3dlj7afq","category_id":"cl74e3apo0017rcpgyabol8l1","_id":"cl74e3app001arcpgd6guzjp2"}],"PostTag":[{"post_id":"cl74e3am30001rcpgpbzbd8md","tag_id":"cl74e3am90003rcpg3tq43cpq","_id":"cl74e3amb0007rcpg6glafxms"},{"post_id":"cl74e3am30001rcpgpbzbd8md","tag_id":"cl74e3ama0004rcpgyfx74f4h","_id":"cl74e3amb0008rcpgh8v66i95"},{"post_id":"cl74e3am30001rcpgpbzbd8md","tag_id":"cl74e3amb0006rcpg321ewa28","_id":"cl74e3amb0009rcpgsrsm9kfr"},{"post_id":"cl74e3amm000arcpgto3z06ma","tag_id":"cl74e3amr000ercpgmbq2wu1r","_id":"cl74e3amy000nrcpgml5th3eq"},{"post_id":"cl74e3amp000crcpgv3f5t0xc","tag_id":"cl74e3amx000lrcpgnj7gz04b","_id":"cl74e3an0000srcpgfmpuigzx"},{"post_id":"cl74e3amr000frcpg81idmhwe","tag_id":"cl74e3amz000qrcpgoun86z1j","_id":"cl74e3an0000wrcpgj85weqcm"},{"post_id":"cl74e3amt000ircpgnc9kguqq","tag_id":"cl74e3an0000urcpgv0fqrpob","_id":"cl74e3an10010rcpgql7pv5aw"},{"post_id":"cl74e3amv000krcpg25fc5e9r","tag_id":"cl74e3an1000yrcpgqz84v7se","_id":"cl74e3an10012rcpgfh9m66ek"},{"post_id":"cl74e3anc0013rcpgkp1oa04y","tag_id":"cl74e3amz000qrcpgoun86z1j","_id":"cl74e3and0014rcpgo0a6pdzn"},{"post_id":"cl74e3apm0016rcpg3dlj7afq","tag_id":"cl74e3am90003rcpg3tq43cpq","_id":"cl74e3apq001brcpgo0g7egd5"},{"post_id":"cl74e3apm0016rcpg3dlj7afq","tag_id":"cl74e3app0018rcpgv0v40utk","_id":"cl74e3apq001crcpg3nh7zrwb"},{"post_id":"cl74e3apm0016rcpg3dlj7afq","tag_id":"cl74e3app0019rcpgftlw38r5","_id":"cl74e3apq001drcpggwenwduo"}],"Tag":[{"name":"python","_id":"cl74e3am90003rcpg3tq43cpq"},{"name":"Solution","_id":"cl74e3ama0004rcpgyfx74f4h"},{"name":"Array","_id":"cl74e3amb0006rcpg321ewa28"},{"name":"problem","_id":"cl74e3amr000ercpgmbq2wu1r"},{"name":"SQL","_id":"cl74e3amx000lrcpgnj7gz04b"},{"name":"Linux","_id":"cl74e3amz000qrcpgoun86z1j"},{"name":"网络安全","_id":"cl74e3an0000urcpgv0fqrpob"},{"name":"git","_id":"cl74e3an1000yrcpgqz84v7se"},{"name":"自动化","_id":"cl74e3app0018rcpgv0v40utk"},{"name":"pytest","_id":"cl74e3app0019rcpgftlw38r5"}]}}